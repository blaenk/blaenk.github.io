<?xml version='1.0' encoding='UTF-8'?><rss version='2.0'><channel><title>Blaenk Denum</title><link>http://www.blaenkdenum.com</link><description></description><item><title>Dots</title><link>http://www.blaenkdenum.com/posts/dots</link><description>&lt;nav id=&quot;toc&quot;class=&quot;right-toc&quot;&gt;
&lt;h3&gt;Contents&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;#file-structure&quot;&gt;File Structure&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#deployment&quot;&gt;Deployment&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#tmux&quot;&gt;tmux&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#zsh&quot;&gt;zsh&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;#aliases&quot;&gt;Aliases&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#completions&quot;&gt;Completions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#functions&quot;&gt;Functions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#cursors&quot;&gt;Cursors&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#misc&quot;&gt;Misc&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#vim&quot;&gt;vim&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/nav&gt;

&lt;p&gt;It&amp;#39;s become a common practice to keep one&amp;#39;s &lt;a href=&quot;http://en.wikipedia.org/wiki/Dotfile#Unix_and_Unix-like_environments&quot;&gt;dotfiles&lt;/a&gt; version controlled, oftentimes mirrored somewhere like Github. A lot of people start their own dotfile collection based (forked) off of someone else&amp;#39;, but that never felt right to me. In my view, dotfiles are personal, sensitive configuration files that are explicitly defined to one&amp;#39;s own taste. It never made sense to me to want to use a giant wad of files with who knows what configuration directives in there. It seemed a lot like &lt;a href=&quot;http://en.wikipedia.org/wiki/Cargo_cult_programming&quot;&gt;cargo culting&lt;/a&gt; to me.&lt;/p&gt;

&lt;p&gt;I do enjoy looking at other peoples&amp;#39; dotfiles from time to time to see what I can pick out and adapt to my own, but otherwise I like to grow mine organically---that is, only configure what I need, as I need it---to ensure that I really understand my configuration. As a result, I created &lt;a href=&quot;https://github.com/blaenk/dots&quot;&gt;my own dotfiles&lt;/a&gt; from scratch.&lt;/p&gt;
&lt;h2 id=&quot;file-structure&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#file-structure&quot; class=&quot;header-link&quot;&gt;File Structure&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The file structure is pretty simple. There&amp;#39;s a folder for every type of dotfile collection, for example: zsh, git, vim, and so on. Each of these can contain hidden files and folders that can be deployed by the deploy script.&lt;/p&gt;
&lt;h2 id=&quot;deployment&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#deployment&quot; class=&quot;header-link&quot;&gt;Deployment&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;My deploy script is called &lt;code&gt;sprinkle&lt;/code&gt;, which is a heavily modified fork of the deploy script from &lt;a href=&quot;https://github.com/holman/dotfiles&quot;&gt;holman&amp;#39;s dotfiles&lt;/a&gt;. I chose this script to start from because I liked that it was a shell script, unlike most other deploy scripts I had seen which were Rakefiles, naturally requiring Ruby to be installed on the system before being able to deploy the dotfiles.&lt;/p&gt;

&lt;p&gt;I also liked that the deploy script had a naming convention such that files and folders with a &lt;code&gt;.symlink&lt;/code&gt; suffix were those that were deployed. However, I didn&amp;#39;t like that vim and Github wouldn&amp;#39;t detect the filetype---and therefore wouldn&amp;#39;t highlight---due to the misleading file extension. So I ended up heavily customizing the script.&lt;/p&gt;

&lt;p&gt;Now, instead of the &lt;code&gt;.symlink&lt;/code&gt;-suffix naming convention, those files and folders that should be deployed are themselves hidden. This allows vim, Github, and others to detect the file type and provide highlighting. Running the deploy script for the first time yields something like this:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/dots/deploy.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;My zsh files have an alias for the sprinkle script so that it can be run from anywhere, though in this case I was already in my dots directory. Files that haven&amp;#39;t been deployed are immediately deployed (symlinked) unless there&amp;#39;s an existing file in the destination. In that case, there are options to backup, overwrite, or remove (without deploying) the existing file, as well as skip that file altogether.&lt;/p&gt;

&lt;p&gt;These commands are entered when prompted by simply entering the first letter of the action, i.e. &lt;code&gt;o&lt;/code&gt; for overwrite. A capitalized letter performs that action for all remaining files as well. This is what the prompt looks like:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/dots/prompt.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;tmux&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#tmux&quot; class=&quot;header-link&quot;&gt;tmux&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;My tmux configuration is pretty simple I think. I keep the bind at &lt;code&gt;C-b&lt;/code&gt; though it kind of interferes with &lt;code&gt;C-f/C-b&lt;/code&gt; scrolling, in which case there&amp;#39;s a bit of lag for &lt;code&gt;C-b&lt;/code&gt; unless I tap it twice. Instead I&amp;#39;m getting used to scrolling with &lt;code&gt;C-u/C-d&lt;/code&gt; though it&amp;#39;s pretty disorienting starting out.&lt;/p&gt;

&lt;p&gt;My window list is pretty subtle I think. Active windows are underlined and the current window name is emboldened.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/dots/tmux.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;I have binds for creating new windows with &lt;code&gt;M-n&lt;/code&gt; and renaming a window with &lt;code&gt;M-r&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;bind -n M-r command-prompt &apos;rename-window %%&apos;
bind -n M-n command-prompt -p &quot;Name of new window:&quot; &quot;new-window -n &apos;%%&apos;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;I also created simple binds for navigating and moving windows around. &lt;code&gt;M-h/M-l&lt;/code&gt; moves to the left and right window respectively, and &lt;code&gt;M-j/M-k&lt;/code&gt; moves the current window left and right, respectively.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;# switch between windows left/right
bind -n M-h previous-window
bind -n M-l next-window

# move windows left/right
bind -n M-j swap-window -t -1
bind -n M-k swap-window -t +1
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id=&quot;zsh&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#zsh&quot; class=&quot;header-link&quot;&gt;zsh&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;My zsh configuration files are created from scratch as well, I don&amp;#39;t use something like oh-my-zsh for the same reasons that I stated in the opening paragraph. I do use &lt;a href=&quot;https://github.com/zsh-users/antigen&quot;&gt;antigen&lt;/a&gt;, which is similar to &lt;a href=&quot;https://github.com/gmarik/Vundle.vim&quot;&gt;vundle&lt;/a&gt; but for zsh, mainly to avoid having to either keep stale snapshots or juggle git submodules of zsh plugins I use. I only use two zsh plugins: &lt;a href=&quot;https://github.com/zsh-users/zsh-syntax-highlighting&quot;&gt;syntax-highlighting&lt;/a&gt; and extra/community &lt;a href=&quot;https://github.com/zsh-users/zsh-completions&quot;&gt;completions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I then have a separate zsh sub-folder that stores zsh files that configure different aspects of zsh, such as aliases, completions, functions, bindings, and so on.&lt;/p&gt;
&lt;h3 id=&quot;aliases&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#aliases&quot; class=&quot;header-link&quot;&gt;Aliases&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;One of my most used aliases is &lt;code&gt;:q&lt;/code&gt; which is simply aliased to &lt;code&gt;exit&lt;/code&gt;, making it very natural for me to exit shells. If &lt;code&gt;pacman&lt;/code&gt; is present on the system, I create many aliases to different kinds of &lt;code&gt;pacman&lt;/code&gt; commands, such as &lt;code&gt;pacup&lt;/code&gt; for &lt;code&gt;pacman -Syu&lt;/code&gt;, &lt;code&gt;pacin&lt;/code&gt; for &lt;code&gt;pacman -S&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;h3 id=&quot;completions&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#completions&quot; class=&quot;header-link&quot;&gt;Completions&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;There&amp;#39;s nothing really special about my completions configuration. I do set it up to use my &lt;code&gt;dircolors&lt;/code&gt; setup, so that the completion menu uses the correct colors for the different kinds of files. I also set it up for case-insensitive substring completion, so that I can type a bit of text from anywhere in the filename, regardless of case, and have it tab-complete correctly.&lt;/p&gt;
&lt;h3 id=&quot;functions&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#functions&quot; class=&quot;header-link&quot;&gt;Functions&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;I do have a few functions I find to be very useful. The first is one that opens up a man-page directly to a given flag, i.e. &lt;code&gt;manf ls -l&lt;/code&gt; opens the man-page for &lt;code&gt;less&lt;/code&gt; directly to the point that describes the &lt;code&gt;-l&lt;/code&gt; switch.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; manf&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  man -P &lt;span class=&quot;s2&quot;&gt;&amp;quot;less -p \&amp;quot;^ +&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Another one of note is one I found on stackoverflow which basically prepends a column to &lt;code&gt;ls -lh&lt;/code&gt; which contains the permissions of the files in octal/numerical form. I let this take the place of the regular &lt;code&gt;ls&lt;/code&gt; command, which can still be run for whatever reason by prepending it with &lt;code&gt;command&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; ls&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;ls -lh --color&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{k=0;for(i=0;i&amp;lt;=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)\&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;         *2^(8-i));if(k)printf(&amp;quot;%0o &amp;quot;,k);print}&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Example output:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;total 32K
755 drwxr-xr-x 2 jorge users 4.0K Feb 15 20:05 git
644 -rw-r--r-- 1 jorge users    0 Jan 27  2013 README.md
755 drwxr-xr-x 2 jorge users 4.0K Feb 13 00:54 ruby
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;I also created a wrapper around the built-in &lt;code&gt;cd&lt;/code&gt; function that accepts parameters of the form &lt;code&gt;b...&lt;/code&gt; where the number of dots is arbitrary. If the wrapper detects a parameter of that form, it removes the &lt;code&gt;b&lt;/code&gt; prefix and expands each of the dots to &lt;code&gt;../&lt;/code&gt;. This makes for very quick navigation up an arbitrary amount of directories. The actual change-directory work is delegated to the original built-in &lt;code&gt;cd&lt;/code&gt; function:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  emulate -LR zsh

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b.&amp;#39;&lt;/span&gt;* &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;builtin cd&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;${${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;builtin cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Example usage:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;some/dir/here &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;b..
some/ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# went up two directories&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;I also have a function for listing the pacman orphan packages on my system, i.e. those that aren&amp;#39;t required by any other package. I found a command for doing this but it just dumped a list of every package, so I modified it to also list the description of the package. This requires the &lt;code&gt;expac&lt;/code&gt; package, a utility to query the pacman database:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; pacorphans&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  expac &lt;span class=&quot;s2&quot;&gt;&amp;quot;%n:%N:%d&amp;quot;&lt;/span&gt; -Q &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;expac &lt;span class=&quot;s2&quot;&gt;&amp;quot;%n %G&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -v &lt;span class=&quot;s1&quot;&gt;&amp;#39; base&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    awk -F: &lt;span class=&quot;s1&quot;&gt;&amp;#39;$2 == &amp;quot;&amp;quot; {printf &amp;quot;%s: %s\n&amp;quot;, $1, $3}&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Example output:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;yasm: A rewrite of NASM to allow for multiple syntax supported (NASM, TASM, GAS, etc.)
zsh: A very advanced and programmable command interpreter (shell) for UNIX
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Finally, another function I recently created that I find very useful is one to fetch my external IP address and both copy it to my clipboard and print it out to the terminal. This is very useful because my IP address does change from time to time, usually if I restart my router. Considering that I host a &lt;a href=&quot;http://mumble.sourceforge.net/&quot;&gt;mumble&lt;/a&gt; and &lt;a href=&quot;http://syncplay.pl/&quot;&gt;syncplay&lt;/a&gt; server, whenever this happens I have to inform my friends of the change, which usually requires me to manually determine my external IP by going to some website that provides the information.&lt;/p&gt;

&lt;p&gt;So I decided to create a command that gets the IP address from &lt;a href=&quot;http://ipinfo.io&quot;&gt;ipinfo.io&lt;/a&gt;, copies the response to my clipboard, and also prints it out to the terminal.&lt;/p&gt;

&lt;p&gt;In the past, one would use a command such as &lt;code&gt;ifconfig&lt;/code&gt; to list the computer&amp;#39;s local addresses. Recently there has been a shift to use the new &lt;a href=&quot;http://man7.org/linux/man-pages/man8/ip.8.html&quot;&gt;&lt;code&gt;ip&lt;/code&gt;&lt;/a&gt; command which houses many sub-commands such as &lt;code&gt;ip addr&lt;/code&gt; which is now the preferred method to list addresses.&lt;/p&gt;

&lt;p&gt;So what I did was create a wrapper for this &lt;code&gt;ip&lt;/code&gt; command and create a fake sub-command called &lt;code&gt;get&lt;/code&gt; which performs this task of retrieving my external IP address. If the sub-command &lt;code&gt;get&lt;/code&gt; wasn&amp;#39;t provided, then the wrapper delegates the work to the actual &lt;code&gt;ip&lt;/code&gt; command, if it exists.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; ip&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  emulate -LR zsh

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;get&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl -s ipinfo.io/ip&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xsel --clipboard
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;copied &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to clipboard&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# only run ip if it exists&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$+&lt;/span&gt;commands&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ip&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;ip &lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Example output:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;λ ~/some/place
» ip get
copied 123.45.678.90 to clipboard
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h3 id=&quot;cursors&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#cursors&quot; class=&quot;header-link&quot;&gt;Cursors&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;I setup mode-aware cursors in zsh, to better emphasize when I&amp;#39;m in vi mode and not. This is pretty straightforward, simply sending the correct terminal control sequence:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; zle-keymap-select &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  zle reset-prompt

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$KEYMAP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;vicmd&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -ne &lt;span class=&quot;s2&quot;&gt;&amp;quot;\033]12;10\007&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -ne &lt;span class=&quot;s2&quot;&gt;&amp;quot;\033]12;6\007&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; zle-line-finish &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -ne &lt;span class=&quot;s2&quot;&gt;&amp;quot;\033]12;6\007&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

zle -N zle-keymap-select
zle -N zle-line-finish
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;This works perfectly fine in urxvt, but tmux must be configured to allow this because otherwise the setting of the cursor color above by zsh bypasses tmux, applying to tmux as a whole. This means that if one tmux window is in vi mode, the cursor will change, but if one then switches to another tmux window that is in insert mode, the cursor color for that window will remain the same as in the one in vi-mode. That is, the changed cursor color applies to every screen in tmux.&lt;/p&gt;

&lt;p&gt;tmux did implement functionality for it to remember the cursor color on a per-window basis back in 2011, but this is only configured out of the box for xterm, since every terminal&amp;#39;s control sequences may vary.&lt;/p&gt;

&lt;p&gt;The cursor color is inherently global, so what happens is that tmux remembers the cursor color for every window. When switching to another tmux window, tmux checks if that window&amp;#39;s cursor color had been previously changed. If so, tmux sets the global cursor color to that window&amp;#39;s saved cursor color. Otherwise, it means that that window&amp;#39;s cursor color hasn&amp;#39;t been changed, in which case it needs to reset the cursor color to the &amp;quot;default&amp;quot; cursor color, in case the previous window did change the color.&lt;/p&gt;

&lt;p&gt;For this, two terminal escape sequences have to be defined, or overridden: the first tells tmux how to set the cursor color and the other tells tmux how to reset it to the &amp;quot;default&amp;quot; color.&lt;/p&gt;

&lt;p&gt;The sequence for setting the color is the same in xterm and urxvt: &lt;code&gt;\033]12;color\007&lt;/code&gt;. However, there is no sequence I know of---after looking at &lt;code&gt;man 7 urxvt&lt;/code&gt;---for resetting the cursor color to the default cursor color. For xterm, it is &lt;code&gt;\033]112\007&lt;/code&gt;. So instead what I decided to do was tell tmux that the sequence was simply the one to set the color, but with the default cursor color explicitly defined, which for me is the 6th ANSI color code (cyan).&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;set -g terminal-overrides &apos;,rxvt*:Cs=\E]12;%p1%s\007:Cr=\E]12;6\007&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h3 id=&quot;misc&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#misc&quot; class=&quot;header-link&quot;&gt;Misc&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;When one runs a command that doesn&amp;#39;t exist, it generally gives an error pointing out that fact. However, the &lt;code&gt;pkgfile&lt;/code&gt; package provides a zsh script that, when sourced, provides information about which package such a command may be found in.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -e /usr/share/doc/pkgfile/command-not-found.zsh &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /usr/share/doc/pkgfile/command-not-found.zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Example output:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;λ ~/some/place
» clojure
clojure may be found in the following packages:
  community/clojure 1.5.1-2     /usr/bin/clojure
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;I also configured &lt;a href=&quot;https://github.com/blaenk/dots/blob/master/zsh/zsh/highlight.zsh&quot;&gt;highlighting&lt;/a&gt; for the &lt;code&gt;less&lt;/code&gt; pager.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/dots/less.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;My prompt is pretty involved and it&amp;#39;s discussed more in-depth in my &lt;a href=&quot;/posts/terminal-customization/#prompt&quot;&gt;customization&lt;/a&gt; post, though it&amp;#39;s slightly outdated. See my dotfiles for the latest configuration.&lt;/p&gt;

&lt;p&gt;One noteworthy thing however is that I highlight the path separator in a subtle cyan.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;SLASH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fg&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[cyan]%}/%{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$reset_color&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PWD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/~&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SLASH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;My vi-binds are pretty straightforward. One noteworthy thing is that I bound &lt;code&gt;_&lt;/code&gt; and &lt;code&gt;g_&lt;/code&gt; to go to the beginning and end of line, respectively, to reflect what I use in vim.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;bindkey -M vicmd &lt;span class=&quot;s2&quot;&gt;&amp;quot;_&amp;quot;&lt;/span&gt; beginning-of-line
bindkey -M vicmd &lt;span class=&quot;s2&quot;&gt;&amp;quot;g_&amp;quot;&lt;/span&gt; end-of-line
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;I also created some binds specific to the completion menu. I bound &lt;code&gt;shift-tab&lt;/code&gt; to go in the reverse direction of &lt;code&gt;tab&lt;/code&gt;. I also changed &lt;code&gt;Enter&lt;/code&gt; to accept and enter the command, instead of the default, which only accepts the completion and allows the user to continue typing the command. Instead, I bound &lt;code&gt;C-g&lt;/code&gt; to perform the accept-only:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;bindkey -M menuselect &lt;span class=&quot;s2&quot;&gt;&amp;quot;^M&amp;quot;&lt;/span&gt; .accept-line
bindkey -M menuselect &lt;span class=&quot;s2&quot;&gt;&amp;quot;^G&amp;quot;&lt;/span&gt; accept-line
bindkey -M menuselect &lt;span class=&quot;s2&quot;&gt;&amp;quot;^[[Z&amp;quot;&lt;/span&gt; reverse-menu-complete
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id=&quot;vim&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#vim&quot; class=&quot;header-link&quot;&gt;vim&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;My vim configuration is discussed in other posts, such as &lt;a href=&quot;/posts/a-simpler-vim-statusline/&quot;&gt;this one&lt;/a&gt;. Some noteworthy things are my mode-aware cursors which you can see &lt;a href=&quot;/posts/a-simpler-vim-statusline/#redesign&quot;&gt;here&lt;/a&gt;, where my statusline is also discussed. They&amp;#39;re basically color-coded based on the mode. I also made all of the cursors be the block cursor, rather than I-beam for insert mode as is default. I also disabled cursor blinking:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gcr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;:block

&lt;span class=&quot;c&quot;&gt;&amp;quot; mode aware cursors&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gcr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;o&lt;/span&gt;:hor50&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;Cursor
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gcr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;n&lt;/span&gt;:Cursor
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gcr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sm&lt;/span&gt;:InsertCursor
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gcr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;:ReplaceCursor&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;hor20
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gcr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;:CommandCursor
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gcr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ve&lt;/span&gt;:VisualCursor

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gcr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;:blinkon0

&lt;span class=&quot;k&quot;&gt;hi&lt;/span&gt; InsertCursor  ctermfg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; guifg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;#fdf6e3&lt;/span&gt; ctermbg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;37&lt;/span&gt;  guibg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;#2aa198&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;hi&lt;/span&gt; VisualCursor  ctermfg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; guifg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;#fdf6e3&lt;/span&gt; ctermbg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;125&lt;/span&gt; guibg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;#d33682&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;hi&lt;/span&gt; ReplaceCursor ctermfg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; guifg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;#fdf6e3&lt;/span&gt; ctermbg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;65&lt;/span&gt;  guibg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;#dc322f&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;hi&lt;/span&gt; CommandCursor ctermfg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; guifg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;#fdf6e3&lt;/span&gt; ctermbg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;33&lt;/span&gt;  guibg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;#268bd2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;I also enable the cursorline only on the current window:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-vim&quot;&gt;augroup &lt;span class=&quot;nb&quot;&gt;cursorline&lt;/span&gt;
  autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;VimEnter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;WinEnter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;BufWinEnter&lt;/span&gt; * &lt;span class=&quot;k&quot;&gt;setlocal&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cursorline&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;WinLeave&lt;/span&gt; * &lt;span class=&quot;k&quot;&gt;setlocal&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nocursorline&lt;/span&gt;
augroup END
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Instead of letting CtrlP generate the list of files, which can be slow, I delegate this work to &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;dir&lt;/code&gt; on unix and windows respectively. If we&amp;#39;re within a git repository, then I take advantage of &lt;code&gt;git ls-files&lt;/code&gt; to do this instead.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; s:ctrlp_fallback &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
  \ has&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;win32&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; ?
    \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;dir %s /-n /b /s /a-d&amp;#39;&lt;/span&gt; :
    \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;find %s -type f&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:ctrlp_user_command &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; [
  \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;.git&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  \ &lt;span class=&quot;s1&quot;&gt;&amp;#39;git --git-dir=%s/.git ls-files -co --exclude-standard&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  \ s:ctrlp_fallback
  \ ]
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id=&quot;conclusion&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#conclusion&quot; class=&quot;header-link&quot;&gt;Conclusion&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;All in all it&amp;#39;s a pretty simple dotfiles system I think. Feel free to take a look through it to see what you may like to adapt to your own configuration.&lt;/p&gt;
</description><pubDate>2014-02-16</pubDate></item><item><title>Live Editing with Hakyll</title><link>http://www.blaenkdenum.com/posts/live-editing-with-hakyll</link><description>&lt;p&gt;A recent trend in developer-oriented blogging is to use static site generators, perhaps the most popular being Jekyll written in Ruby. The general workflow when writing posts with static site generators is the classic edit, save, reload.&lt;/p&gt;

&lt;nav id=&quot;toc&quot;class=&quot;right-toc&quot;&gt;
&lt;h3&gt;Contents&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;#conception&quot;&gt;Conception&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#server-architecture&quot;&gt;Server Architecture&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;#state&quot;&gt;State&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#communication&quot;&gt;Communication&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#implementation&quot;&gt;Implementation&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;#websocket-server&quot;&gt;WebSocket Server&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#hakyll-compiler&quot;&gt;Hakyll Compiler&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#main-thread&quot;&gt;Main Thread&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#client-side&quot;&gt;Client Side&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/nav&gt;

&lt;p&gt;A while back, a friend was telling me about his Jekyll setup and in passing mentioned how indispensable some &amp;quot;LiveReload&amp;quot; tool was. I previously did use Jekyll myself, but I hadn&amp;#39;t heard of this LiveReload tool. For me, reloading didn&amp;#39;t feel like such a hassle, so having a tool that &amp;quot;only&amp;quot; automatically reloaded the page for me didn&amp;#39;t feel entirely beneficial.&lt;/p&gt;

&lt;p&gt;For this reason, I assumed that this was &lt;strong&gt;not&lt;/strong&gt; what the LiveReload tool did, and instead I assumed it somehow replaced the content (i.e. post body) in-place. It turns out I was incorrect in my assumption and ended up implementing what I thought LiveReload did in Hakyll, the static site generator I use written in Haskell.&lt;/p&gt;
&lt;h1 id=&quot;conception&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#conception&quot; class=&quot;header-link&quot;&gt;Conception&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;I had to come up with a way to intercept the post body content when it was altered, and send that to the client, who would then simply replace the content div with the received content. Conceptually, it was a pretty straightforward process.&lt;/p&gt;

&lt;p&gt;I decided that the communication channel between the Hakyll preview server and the client would be a WebSocket, so I looked for websocket packages on Hackage and &lt;a href=&quot;http://hackage.haskell.org/package/websockets&quot;&gt;found one&lt;/a&gt; by the author of Hakyll himself. There are backends for &lt;a href=&quot;http://hackage.haskell.org/package/wai-websockets&quot;&gt;wai&lt;/a&gt; and &lt;a href=&quot;http://hackage.haskell.org/package/websockets-snap&quot;&gt;snap&lt;/a&gt;, but starting up a wai or snap server seemed too heavy for what I was going to do.&lt;/p&gt;

&lt;p&gt;Having written Hakyll and Pandoc compilers before, I knew that the best place to get the changes to a post would be within the Hakyll compiler pipeline, before templates are applied.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getResourceBody&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pandocCompiler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storeDirectory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pushToClient&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadAndApplyTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadAndApplyTemplate&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;templates/layout.html&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layoutContext&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Inserting a compiler at this appropriate location would give me access to changes to posts as they were applied, allowing me to then send them to the client via WebSocket.&lt;/p&gt;
&lt;h1 id=&quot;server-architecture&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#server-architecture&quot; class=&quot;header-link&quot;&gt;Server Architecture&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;The WebSocket server that comes with the websockets package forks separate threads for every client that connects. I fork the WebSocket server itself within the site binary to avoid interrupting the main Hakyll compilation process. Therefore there needs to be a way for the Hakyll compiler to communicate with the WebSocket client threads, specifically to send each client the changes as they&amp;#39;re made to a post.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;main thread

&lt;ul&gt;
&lt;li&gt;hakyll&lt;/li&gt;
&lt;li&gt;WebSocket server

&lt;ul&gt;
&lt;li&gt;client thread 1&lt;/li&gt;
&lt;li&gt;client thread 2&lt;/li&gt;
&lt;li&gt;client thread N&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;state&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#state&quot; class=&quot;header-link&quot;&gt;State&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;First, however, I had to think about how the WebSocket server would communicate with the clients. I decided that the most straightforward thing to do would be to communicate on a per-route basis. A route in this case refers to a post, such as &lt;span class=&quot;path&quot;&gt;posts/live-editing-with-hakyll.markdown&lt;/span&gt;. The clients use that path to establish the connection, which tells the WebSocket server that they&amp;#39;re interested in data about that particular post. This way, the client doesn&amp;#39;t get updates about posts it doesn&amp;#39;t care about.&lt;/p&gt;

&lt;p&gt;An alternative to this would&amp;#39;ve perhaps been to use a single communication channel, where the server would send data about every post that was changed, and clients decided which applied to them. While this seems simpler, it has the consequence that &lt;em&gt;every&lt;/em&gt; post&amp;#39;s data is sent to the client, even posts no one is actually paying attention to. This is inefficient, and to avoid this inefficiency would again require some form of &amp;quot;interest-registration&amp;quot; which is implicit in the aforementioned method.&lt;/p&gt;

&lt;p&gt;For this reason, the server needs a bit of state to keep track of which connections care about which routes, best represented by a &lt;code&gt;Map&lt;/code&gt; of routes to connections, something like:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Connections&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id=&quot;communication&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#communication&quot; class=&quot;header-link&quot;&gt;Communication&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Haskell provides a variety of concurrency primitives, such as &lt;a href=&quot;http://hackage.haskell.org/package/base/docs/Control-Concurrent-MVar.html&quot;&gt;MVars&lt;/a&gt; and &lt;a href=&quot;http://hackage.haskell.org/package/base/docs/Control-Concurrent-Chan.html&quot;&gt;Channels&lt;/a&gt;. MVars are mutable locations in memory and Channels are simply FIFO channels. It made sense to use a channel between the Hakyll compiler and the WebSocket client threads, so that WebSocket client threads would subscribe/listen to the channel and the Hakyll compiler would publish/write to the channel with the new post data.&lt;/p&gt;

&lt;p&gt;However, we&amp;#39;re actually going to be using the &lt;a href=&quot;http://hackage.haskell.org/package/stm&quot;&gt;stm&lt;/a&gt; package&amp;#39;s variants of these concurrency primitives: &lt;a href=&quot;http://hackage.haskell.org/package/stm/docs/Control-Concurrent-STM-TVar.html&quot;&gt;TVars&lt;/a&gt; and &lt;a href=&quot;http://hackage.haskell.org/package/stm/docs/Control-Concurrent-STM-TChan.html&quot;&gt;TChans&lt;/a&gt;. The &lt;a href=&quot;http://en.wikipedia.org/wiki/Software_transactional_memory&quot;&gt;Software Transactional Memory&lt;/a&gt; package allows us to perform transactional, atomic operations to avoid race conditions. We&amp;#39;re going to use a &lt;code&gt;TVar&lt;/code&gt; for the server state, which will allow the Hakyll and WebSocket server to perform transactional read/write operations on the server state without stepping on each others&amp;#39; toes (i.e. race conditions).&lt;/p&gt;

&lt;p&gt;I chose a &lt;code&gt;TVar&lt;/code&gt; and not a &lt;code&gt;TMVar&lt;/code&gt; because we won&amp;#39;t have a concept of an &amp;quot;empty state,&amp;quot; which is what the &lt;code&gt;TMVar&lt;/code&gt; variant allows. The state will always contain something, even if that&amp;#39;s just an empty &lt;code&gt;Map&lt;/code&gt;. So let&amp;#39;s wrap our state up in a &lt;code&gt;TVar&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TVar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;There&amp;#39;s a slight problem with our idea of using channels, however. Reading a value from a channel &amp;quot;consumes&amp;quot; that value, i.e. it&amp;#39;s no longer available for reading from that channel. This complicates things because it means that I couldn&amp;#39;t easily have a single channel to write every post&amp;#39;s changes to because that would mean that only the first client thread to read the data would receive the data.&lt;/p&gt;

&lt;p&gt;Fortunately, the channel type supports a duplication operation. If you have channel &lt;code&gt;A&lt;/code&gt; and you duplicate it, yielding channel &lt;code&gt;B&lt;/code&gt;, writing to any one of those channels makes the data available to read from both channels:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Duplicate a Chan: the duplicate channel begins empty, but data written to either channel from then on will be available from both. Hence this creates a kind of broadcast channel, where data written by anyone is seen by everyone else.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Remember that our server state consists of a &lt;code&gt;Map&lt;/code&gt; of routes to connections. Instead, we could make this a &lt;code&gt;Map&lt;/code&gt; of routes to broadcast channels. When the Hakyll compiler updates a post, it&amp;#39;ll see if there&amp;#39;s a broadcast channel associated with the post&amp;#39;s route and if so, it&amp;#39;ll pipe the data through that broadcast channel. On the WebSocket client thread side, they will duplicate the broadcast channel for that route they&amp;#39;re interested in, or if it doesn&amp;#39;t already exist, create it first.&lt;/p&gt;

&lt;p&gt;One final point is that we would like to avoid writing to a channel if no one is listening,  to avoid unnecessary work. A simple way to achieve this is through simple reference counting. When a new client listens in on the broadcast channel, we increment the reference count, and accordingly decrement it when they disconnect, removing the channel from the Map altogether if no one is listening anymore.&lt;/p&gt;

&lt;p&gt;To be precise, we will be creating the broadcast channel with &lt;code&gt;newBroadcastTChan&lt;/code&gt;, which is recommended when creating a broadcast channel. This is because creating a broadcast channel with &lt;code&gt;newTChan&lt;/code&gt; has the consequence that it&amp;#39;s treated as any other channel that can be read from, so data begins to pile up as it&amp;#39;s written since it&amp;#39;s never read from, only the duplicate channels are read from. Creating one with &lt;code&gt;newBroadcastTChan&lt;/code&gt; closes the read stream which allows the garbage collector to dispose of items once they&amp;#39;re read from the duplicate channels.&lt;/p&gt;
&lt;h1 id=&quot;implementation&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#implementation&quot; class=&quot;header-link&quot;&gt;Implementation&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Now that we&amp;#39;ve planned stuff out we can get to the implementation. As a summary, this is what the WebSocket server will be doing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;client opens post which initiates connection to WebSocket server for that post&lt;/li&gt;
&lt;li&gt;WebSocket server forks off a thread to handle that client

&lt;ol&gt;
&lt;li&gt;client checks server state to see if broadcast channel already exists for the post

&lt;ul&gt;
&lt;li&gt;exists

&lt;ol&gt;
&lt;li&gt;duplicate the broadcast channel&lt;/li&gt;
&lt;li&gt;increment reference count&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;doesn&amp;#39;t exist

&lt;ol&gt;
&lt;li&gt;create a broadcast channel for this post&lt;/li&gt;
&lt;li&gt;put it in server state with initial reference count of 1&lt;/li&gt;
&lt;li&gt;duplicate it&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;listen in on duplicate channel for changes to the post&lt;/li&gt;
&lt;li&gt;when data is received from the channel, pipe it to WebSocket client&lt;/li&gt;
&lt;li&gt;repeat steps 2-3 forever&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And here&amp;#39;s what the Hakyll compiler will be doing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;retrieves item body&lt;/li&gt;
&lt;li&gt;checks if there&amp;#39;s a broadcast channel available for this item

&lt;ul&gt;
&lt;li&gt;yes: pipe the item body through the channel&lt;/li&gt;
&lt;li&gt;no: do nothing&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First we have our server state, which consists of a map from routes to pairs of channels and their reference counts. Once again, we&amp;#39;ll store this state in a &lt;code&gt;TVar&lt;/code&gt; so that it can be read and written to from Hakyll and the WebSocket server in a transactional manner.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Channels&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TVar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TChan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id=&quot;websocket-server&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#websocket-server&quot; class=&quot;header-link&quot;&gt;WebSocket Server&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The WebSocket server is pretty straightforward. We&amp;#39;ll print a message out and listen in on port 9160, specifying a client connection handler &lt;code&gt;wsHandler&lt;/code&gt; that needs access to the server state:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;wsServer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Channels&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;wsServer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;WebSocket Server Listening on http://0.0.0.0:9160/&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;WS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runServer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.0.0.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9160&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wsHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;The client handler starts out in a straightforward manner. We begin by getting the request data, from which we yield the path that the client connected to. This path, after all, signifies the post the client is interested in. Then we proceed to accept the client connection:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;wsHandler&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Channels&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ServerApp&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;wsHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pendingRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestPath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acceptRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Next we need to get the channel we&amp;#39;ll be listening in on. Notice that this is performed &lt;code&gt;atomically&lt;/code&gt; within the &lt;code&gt;STM&lt;/code&gt; monad, since we don&amp;#39;t want to have race conditions between the time we read the map and when we update the server state with either an incremented reference count or a new entry.&lt;/p&gt;

&lt;p&gt;We begin by retrieving the server state from the &lt;code&gt;TVar&lt;/code&gt;. We then perform a lookup in the Map to determine if a channel already exists for the given path. If a channel &lt;strong&gt;doesn&amp;#39;t&lt;/strong&gt; exist, we create a new broadcast channel using &lt;code&gt;newBroadcastTChan&lt;/code&gt; and insert it into the server state Map with an initial reference count of 1. Finally we duplicate this broadcast channel using &lt;code&gt;dupTChan&lt;/code&gt;, which will be our result. If a broadcast channel already does exist, then we simply increment the reference count and duplicate it.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;  &lt;span class=&quot;n&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;liftIO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomically&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chans&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readTVar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chans&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modifyTVar&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dupTChan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newBroadcastTChan&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modifyTVar&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dupTChan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Now that we have the correct channel to listen from, we can forever perform the same loop:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;read from the channel; this blocks until there&amp;#39;s something to read&lt;/li&gt;
&lt;li&gt;pipe the data to the WebSocket&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;  &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catchDisconnect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forever&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;liftIO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;atomically&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readTChan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendTextData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Finally we need to gracefully handle the case where the client leaves by either decrementing the reference count or outright removing the channel from the Map. This is also an atomic operation since we&amp;#39;re performing a read followed by a write:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;  &lt;span class=&quot;n&quot;&gt;atomically&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chans&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readTVar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chans&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
          &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifyTVar&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
          &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifyTVar&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refcount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id=&quot;hakyll-compiler&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#hakyll-compiler&quot; class=&quot;header-link&quot;&gt;Hakyll Compiler&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Remember that we also need a Hakyll compiler to insert into the Hakyll compiler pipeline. This compiler will read the server state &lt;code&gt;Map&lt;/code&gt; and determine if if there&amp;#39;s a channel to send the item body to, and if there isn&amp;#39;t, does nothing.&lt;/p&gt;

&lt;p&gt;We will need two pieces of data relevant to the &lt;code&gt;Item&lt;/code&gt; being compiled: the path to the file responsible for this &lt;code&gt;Item&lt;/code&gt; as well as the &lt;code&gt;Item&lt;/code&gt;&amp;#39;s body. The path is what we&amp;#39;ll use as the key into the Map, and the body is what we&amp;#39;ll pipe through the channel:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;webSocketPipe&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Channels&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Compiler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;webSocketPipe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unsafeCompiler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toFilePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemIdentifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;We fork off another thread to atomically retrieve the server state and determine if there&amp;#39;s a channel associated with the path, and if so, pipes the body through the channel:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forkIO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomically&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chans&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readTVar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt;

      &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chans&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writeTChan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;The final and very important thing to do is to return the item as it was passed to us. This in effect makes this Hakyll compiler transparent, just &amp;quot;observing&amp;quot; the data that&amp;#39;s passing through it.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id=&quot;main-thread&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#main-thread&quot; class=&quot;header-link&quot;&gt;Main Thread&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The main thread should begin by initializing the server state:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;  &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomically&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newTVar&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;You&amp;#39;ll need a way to determine whether the WebSocket server should run. In my case I have a &lt;code&gt;previewMode&lt;/code&gt; variable that&amp;#39;s only true when the Hakyll action is either watch or preview; everything else defaults to deploy-mode.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previewMode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;watch&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;preview&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previewMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forkIO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wsServer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Finally, don&amp;#39;t forget to insert the Hakyll compiler into the pipeline, passing it the server state:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getResourceBody&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pandocCompiler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storeDirectory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webSocketPipe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadAndApplyTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadAndApplyTemplate&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;templates/layout.html&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layoutContext&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id=&quot;client-side&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#client-side&quot; class=&quot;header-link&quot;&gt;Client Side&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Now we need to wire stuff up from the client side. First though there&amp;#39;s one last thing we need to do in the back-end. We need to create a Hakyll &lt;code&gt;Context&lt;/code&gt; that inserts the client-side JavaScript only if we&amp;#39;re in preview mode, otherwise when you deploy your site every visitor will be attempting to connect to the WebSocket server.&lt;/p&gt;

&lt;p&gt;In my setup I have a &lt;code&gt;postCtx&lt;/code&gt; that specifies the &lt;code&gt;Context&lt;/code&gt; to use for posts. I&amp;#39;ve changed it to be a function that takes as argument a &lt;code&gt;Bool&lt;/code&gt; specifying whether or not the site is in preview mode. This indicator is further passed on to a function called &lt;code&gt;pushJS&lt;/code&gt; that will embed the JavaScript if it&amp;#39;s &lt;code&gt;True&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;postCtx&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;postCtx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preview&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mconcat&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pushJS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preview&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pushJS&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultCtx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Before we get to &lt;code&gt;pushJS&lt;/code&gt;, consider that we might want to disable this feature on a per-post basis. Personally I&amp;#39;d like this functionality to be on by default, but there are some posts I have such as &lt;a href=&quot;/notes/machine-learning&quot;&gt;this one&lt;/a&gt; that are ridiculously long and take a very long time to load, so I&amp;#39;d like to be able to set a metadata &lt;code&gt;push: off&lt;/code&gt; option in that particular post to disable it. Let&amp;#39;s define a function that gets the metadata value and assumes its &lt;code&gt;True&lt;/code&gt; unless it&amp;#39;s explicitly set to &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;off&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;pushOn&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MonadMetadata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;pushOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pushMeta&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getMetadataField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemIdentifier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;push&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pushMeta&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
             &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;
             &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;off&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;
             &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Now we can get to the &lt;code&gt;pushJS&lt;/code&gt; function. We only generate the JavaScript code if the site is in preview mode and the option isn&amp;#39;t disabled for this particular &lt;code&gt;Item&lt;/code&gt;. The way this will work is that it&amp;#39;ll load the contents of the file &lt;code&gt;templates/push-js.html&lt;/code&gt; into the &lt;code&gt;key&lt;/code&gt; tag, which is &lt;code&gt;&amp;quot;pushJS&amp;quot;&lt;/code&gt; in my case as defined above. So in my layout template I&amp;#39;ll have &lt;code&gt;$pushJS$&lt;/code&gt;, which will be replaced by the contents of &lt;code&gt;push-js.html&lt;/code&gt; or it&amp;#39;ll be an empty string if the requirements for the feature aren&amp;#39;t met. One last thing is that we pass the path of the file responsible for the &lt;code&gt;Item&lt;/code&gt; into the &lt;code&gt;push-js.html&lt;/code&gt; template as the &lt;code&gt;$path$&lt;/code&gt; tag so that the WebSocket knows what path to connect to:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;pushJS&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;pushJS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preview&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pushOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preview&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toFilePath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getUnderlying&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadBody&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;templates/push-js.html&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;itm&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeItem&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Compiler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;gend&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constField&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;path&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itm&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gend&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;The contents of the file &lt;code&gt;push-js.html&lt;/code&gt; are pretty straightforward. We use the &lt;code&gt;$path$&lt;/code&gt; that we were passed by &lt;code&gt;pushJS&lt;/code&gt; to connect to the WebSocket server. Then we define an &lt;code&gt;onmessage&lt;/code&gt; handler. This handler does a couple of things. First it finds the element that contains my post body. Once it has the element, it replaces the contents of this element with the data received through the WebSocket.&lt;/p&gt;

&lt;p&gt;We then have to perform some house cleaning, essentially re-running JavaScript functionality that ran on DOM load, such as creating links out of the headers in the post. I wrapped this stuff up in a global &lt;code&gt;refresh&lt;/code&gt; function. This allows me to simply call it again in this handler. The last thing I do in this handler is re-run MathJax &lt;script type=&quot;math/tex&quot;&gt;\LaTeX&lt;/script&gt; typesetting on the post body element, since it originally ran on DOM load as well.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- preview push --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;async=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ws://localhost:9160/$path$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;article .entry-content&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;MathJax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Typeset&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MathJax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h1 id=&quot;conclusion&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#conclusion&quot; class=&quot;header-link&quot;&gt;Conclusion&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;So I added this functionality to Hakyll that I thought others had through LiveReload. Of course, I showed it to the friend that told me about LiveReload to begin with and he was amazed, as was I when he told me that all LiveReload did was refresh the page for you.&lt;/p&gt;

&lt;p&gt;Of course, the advantage of LiveReload over this is that it handles any asset, such as style sheets, and reloads the entire page so that you can see those changes, rather than just the post body. But like I mentioned in the beginning of this post, I don&amp;#39;t feel like I need that functionality in particular. Perhaps I&amp;#39;ll implement it later on as well anyways though, for convenience. I have a feeling it&amp;#39;ll be more straightforward than this.&lt;/p&gt;
</description><pubDate>2013-12-20</pubDate></item><item><title>A Simpler Vim Statusline</title><link>http://www.blaenkdenum.com/posts/a-simpler-vim-statusline</link><description>&lt;p&gt;Everyone that uses Vim and their grandmothers have apparently adopted the use of statusline plugins like &lt;a href=&quot;https://github.com/Lokaltog/vim-powerline&quot;&gt;vim-powerline&lt;/a&gt; or &lt;a href=&quot;https://github.com/bling/vim-airline&quot;&gt;vim-airline&lt;/a&gt;. The latter, more recent vim-airline has gained popularity due to the fact that vim-powerline was deprecated in favor of a still-in-development &lt;a href=&quot;https://github.com/Lokaltog/powerline&quot;&gt;rewrite&lt;/a&gt; that aims to provide a more general foundation for people to use the same kind of statusline in other areas, such as &lt;a href=&quot;https://github.com/erikw/tmux-powerline&quot;&gt;tmux&lt;/a&gt; and &lt;a href=&quot;cringe&quot;&gt;shell prompts&lt;/a&gt;. So now everyone can have the same look: &lt;a href=&quot;http://ethanschoonover.com/solarized&quot;&gt;solarized&lt;/a&gt; and some powerline-like status, &lt;em&gt;everywhere&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s of course nothing wrong with using these plugins, but I&amp;#39;ve come to realize that they&amp;#39;re overdone for my particular needs, and I don&amp;#39;t even really care for how they look.&lt;/p&gt;
&lt;h2 id=&quot;patched-fonts&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#patched-fonts&quot; class=&quot;header-link&quot;&gt;Patched Fonts&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;First there was the annoyance of having to use patched fonts to achieve the &amp;quot;powerline look&amp;quot;. This isn&amp;#39;t a huge problem since it&amp;#39;s pretty straightforward to track down, download, and install pre-patched fonts. This has only become somewhat more annoying due to the fact that the new powerline rewrite patches fonts differently, so you have to find the patched font for the version of powerline you use, and different plugins adopt different versions. Now do this for every OS you use, in my case, Windows, Linux, and OSX.&lt;/p&gt;

&lt;p&gt;The point is that in the grand scheme of things, when you take a step back, you realize you&amp;#39;re doing all of this for a mere statusline in a particular application (or two).&lt;/p&gt;
&lt;h2 id=&quot;noise&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#noise&quot; class=&quot;header-link&quot;&gt;Noise&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;By default, powerline shows the mode you&amp;#39;re currently in, git branch if applicable, file name, file format, file encoding, file type, percentage through file, line number, column number, as well as flags that show whether you&amp;#39;re in paste mode, if the file is modified, or if it&amp;#39;s read-only. The plugins also sport an entirely custom &lt;a href=&quot;http://kien.github.io/ctrlp.vim/&quot;&gt;CtrlP&lt;/a&gt; statusline.&lt;/p&gt;

&lt;p&gt;When I switched over to airline recently I decided to take advantage of the fact that it&amp;#39;s somewhat customizable. At first I only did so to manually define a colorscheme I wanted, since the predefined one I had been using kept being changed around by upstream.&lt;/p&gt;

&lt;p&gt;Then I came to realize that I didn&amp;#39;t need all of that information. This is a similar conclusion I came to when I recently redesigned my &lt;a href=&quot;/posts/terminal-customization/#prompt&quot;&gt;shell prompt&lt;/a&gt;. I started by shortening the Vim mode part of the statusline, e.g. NORMAL became N.&lt;/p&gt;

&lt;p&gt;I rarely ever need to care about the file format, encoding, or type. If I do, I can simply set &lt;code&gt;ff&lt;/code&gt;, &lt;code&gt;fenc&lt;/code&gt;, or &lt;code&gt;ft&lt;/code&gt; respectively to have them printed. The file type in particular I can usually deduce from the file extension or contents, unless I&amp;#39;ve explicitly set it myself.&lt;/p&gt;

&lt;p&gt;Similarly, I don&amp;#39;t need the current line number to be in the statusline since it&amp;#39;s already in the number line on the left which I always have visible due to &lt;code&gt;relativenumber&lt;/code&gt;. This has the effect of numbering the current line as line 0. Setting &lt;code&gt;number&lt;/code&gt; as well changes this so that the current line is numbered with the actual, absolute line number.&lt;/p&gt;

&lt;p&gt;Finally, I&amp;#39;ve rarely cared to know how far I am in the file, but I admit that sometimes it&amp;#39;s useful to get an idea of how much more of the file there is, usually in something like a configuration file. For the rare occasion in which this is useful, this information is a simple Ctrl-G away.&lt;/p&gt;
&lt;h2 id=&quot;signal&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#signal&quot; class=&quot;header-link&quot;&gt;Signal&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;After taking all of this away, what remains is the file name, column number, git branch, and status indicators for whether or not the file is modified, read-only, or in paste mode.&lt;/p&gt;

&lt;p&gt;The column number has become indispensable for those language compilers/interpreters that output the column number on which an error was found, such as Haskell&amp;#39;s GHC. In fact, I&amp;#39;m now constantly annoyed by those that don&amp;#39;t do this. Given an error on line 30 column 24, I go to the line number with &lt;code&gt;:30&lt;/code&gt; and the column with &lt;code&gt;24|&lt;/code&gt; and I&amp;#39;m instantly at the problem location.&lt;/p&gt;

&lt;p&gt;The file name is of course useful, specifically shown relative to the current working directory. The git branch is also useful and provided by the &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;fugitive&lt;/a&gt; plugin.&lt;/p&gt;

&lt;p&gt;Finally, a select few markers are very useful, such as whether or not the file has been modified since the last write, if a file is read-only, and if one is in paste mode.&lt;/p&gt;

&lt;p&gt;After removing what I didn&amp;#39;t need, I ended up with this very customized airline installation, where the number on the right side is the column number:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/a-simpler-vim-statusline/airline.png&quot; class=&quot;center&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;redesign&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#redesign&quot; class=&quot;header-link&quot;&gt;Redesign&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;This statusline was fine, but I couldn&amp;#39;t shake the thought that it felt out of place with those colors and arrows; it felt overdone. I ended up commenting out my airline configuration---which was &lt;a href=&quot;https://github.com/blaenk/dots/blob/275b3b40fa0c57f1b48b5ba59b9ecbc00cddf866/vim/vimrc.ln#L80-L202&quot;&gt;already pretty long&lt;/a&gt;---and attempted to create a statusline from scratch with the goal of simplicity. I ended up with this, where the number on the left under the number line is the column number:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/a-simpler-vim-statusline/regular.png&quot; class=&quot;center&quot;&gt;&lt;/p&gt;

&lt;p&gt;I completely got rid of any mode designation in the statusline since I realized that I had the &lt;code&gt;showmode&lt;/code&gt; option set, which already shows the current mode in the message line under the statusline. Further still, I created &lt;a href=&quot;https://github.com/blaenk/dots/blob/9843177fa6155e843eb9e84225f458cd0205c969/vim/vimrc.ln#L49-L64&quot;&gt;mode-aware cursors&lt;/a&gt; that change color based on the mode using the &lt;code&gt;gcr&lt;/code&gt; option. Top-to-bottom: normal, insert, visual, replace, command:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/a-simpler-vim-statusline/gcr-normal.png&quot; class=&quot;center&quot;&gt;
&lt;img src=&quot;/images/posts/a-simpler-vim-statusline/gcr-insert.png&quot; class=&quot;center&quot;&gt;
&lt;img src=&quot;/images/posts/a-simpler-vim-statusline/gcr-visual.png&quot; class=&quot;center&quot;&gt;
&lt;img src=&quot;/images/posts/a-simpler-vim-statusline/gcr-replace.png&quot; class=&quot;center&quot;&gt;
&lt;img src=&quot;/images/posts/a-simpler-vim-statusline/gcr-command.png&quot; class=&quot;center&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;inactive-statuslines&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#inactive-statuslines&quot; class=&quot;header-link&quot;&gt;Inactive Statuslines&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;One piece of functionality that I wanted to preserve from airline was support for different active and inactive statuslines. In my case, I wanted this to be a subtle difference as you can see in the image below, where some things lose their color and the angle quotes become inverted:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/a-simpler-vim-statusline/regular-inactive.png&quot; class=&quot;center&quot;&gt;&lt;/p&gt;

&lt;p&gt;This feature isn&amp;#39;t built into Vim, but it can be emulated by defining Vim auto commands on window focus events which refresh every window&amp;#39;s statusline:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; s:RefreshStatus&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; nr &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; range&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; winnr&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; setwinvar&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;nr&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;amp;statusline&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;%!Status(&amp;#39;&lt;/span&gt; . nr . &lt;span class=&quot;s1&quot;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;endfor&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;

augroup status
  autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
  autocmd &lt;span class=&quot;nb&quot;&gt;VimEnter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;WinEnter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;BufWinEnter&lt;/span&gt; * &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;SID&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;RefreshStatus&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
augroup END
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;The function that actually constructs the statusline is called &lt;code&gt;Status&lt;/code&gt;. It takes an argument that corresponds to the window for which the statusline is to be constructed. I then detect whether the statusline being constructed is going to be active by checking it against the current/focused window:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; active &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;:winnum &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; winnr&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;I set the statusline using the &lt;code&gt;%!SomeFunc()&lt;/code&gt; syntax so that the result of the function is the value that&amp;#39;s interpreted to construct the statusline. One problem is that when done this way, the function is evaluated in the context of the currently focused window and buffer, so if you use the value of &lt;code&gt;&amp;amp;modified&lt;/code&gt; in your statusline somehow, and you have various windows but only the currently focused one is modified, all of the other windows will show the same modified marker, because the query as to whether or not they&amp;#39;re modified was done within the context of the focused window.&lt;/p&gt;

&lt;p&gt;The documentation presented the solution to this problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the &amp;quot;&lt;code&gt;%!&lt;/code&gt;&amp;quot; expression is evaluated in the context of the current window and buffer, while &lt;code&gt;%{}&lt;/code&gt; items are evaluated in the context of the window that the statusline belongs to.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;&lt;strong&gt;Vim 7.4&amp;#39;s&lt;/strong&gt; &lt;a href=&quot;http://vimhelp.appspot.com/options.txt.html#%27statusline%27&quot;&gt;documentation&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that if we want to perform behavior specific to the window or buffer for which the statusline is being created, we should wrap that in a &lt;code&gt;%{}&lt;/code&gt; expression block:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; stat .&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%{&amp;amp;modified ? &amp;#39; +&amp;#39; : &amp;#39;&amp;#39;}&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Defining a function to construct the statusline isn&amp;#39;t as complicated as it may seem. Once the boilerplate is defined, it&amp;#39;s a very simple way of constructing a statusline, and in my opinion more &lt;a href=&quot;https://github.com/blaenk/dots/blob/dfb34f1ad78f5aa25bc486d3c14c9a0ef24094bd/vim/.vimrc#L168&quot;&gt;organized and manageable&lt;/a&gt; than typical, &lt;a href=&quot;http://stackoverflow.com/a/5380230/101090&quot;&gt;densely packed&lt;/a&gt; statusline declarations. For example, here&amp;#39;s the code for showing the file-modified marker, where &lt;code&gt;Color&lt;/code&gt; is a helper function that conditionally colors the passed content based on whether or not the window is active:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; stat .&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; Color&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;isactive&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%{&amp;amp;modified ? &amp;#39; +&amp;#39; : &amp;#39;&amp;#39;}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Here&amp;#39;s what the modified, paste mode, and read-only markers look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/a-simpler-vim-statusline/regular-modified.png&quot; class=&quot;center&quot;&gt;
&lt;img src=&quot;/images/posts/a-simpler-vim-statusline/regular-paste.png&quot; class=&quot;center&quot;&gt;
&lt;img src=&quot;/images/posts/a-simpler-vim-statusline/regular-readonly.png&quot; class=&quot;center&quot;&gt;&lt;/p&gt;

&lt;p&gt;I didn&amp;#39;t want the read-only marker to be &lt;code&gt;RO&lt;/code&gt;, so instead I got the inspiration from when one does &lt;code&gt;sudo !!&lt;/code&gt; to re-do the previous command with &lt;code&gt;sudo&lt;/code&gt;. In fact, I have a mapping for this that I found online, &lt;code&gt;w!!&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-vim&quot;&gt;cmap &lt;span class=&quot;k&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!!&lt;/span&gt; %&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;sudo tee &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/dev/&lt;/span&gt;null %
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;I finally had to redo the CtrlP theme from scratch as well, because I had previously customized it through airline&amp;#39;s API. This turned out to be pretty straightforward, since CtrlP itself exposes a function for this. With airline, I had this, which I specifically made to look like how it looked in powerline by default:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/a-simpler-vim-statusline/airline-ctrlp.png&quot; class=&quot;center&quot;&gt;&lt;/p&gt;

&lt;p&gt;This actually looked pretty nice, in my opinion, but this look doesn&amp;#39;t mesh well with what I&amp;#39;ve created so far. I completely got rid of everything but the current mode and search scope path. Whether regex is turned on and/or if searching by file name is reflected in the CtrlP prompt already:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/a-simpler-vim-statusline/regular-ctrlp.png&quot; class=&quot;center&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#conclusion&quot; class=&quot;header-link&quot;&gt;Conclusion&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Like I said when I started out this post: there&amp;#39;s nothing wrong with using one of these statusline plugins. They certainly look nice and seem like a step up from the default statusline. It&amp;#39;s just that I took a step back and realized I didn&amp;#39;t need the things they offered, and they didn&amp;#39;t look as great as I had originally thought, back when I compared it to a default statusline.&lt;/p&gt;

&lt;p&gt;For as much as some of these plugins claim to be &amp;quot;light,&amp;quot; it&amp;#39;s generally difficult to be lighter than using no plugin at all &lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. It&amp;#39;s not that this extra code will make your Vim unusably slow with today&amp;#39;s hardware, but that it seems pointless to carry around if you&amp;#39;re not even using most of it, especially considering how simple it seems to be to define your own statusline, and---if you care to---personalize your setup.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/itchyny/lightline.vim&quot;&gt;lightline&lt;/a&gt; is one statusline plugin I know of---but haven&amp;#39;t used---whose philosophy it is to have the user define as much of the statusline as possible in the hopes of remaining light. I haven&amp;#39;t used it, so I can&amp;#39;t comment on it, but in my case defining my own from scratch was simple enough already. That said, this might be useful for others who find themselves in a similar position but who would rather use something maintained by someone else.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description><pubDate>2013-12-14</pubDate></item><item><title>Custom XKB Options with Gnome</title><link>http://www.blaenkdenum.com/posts/custom-xkb-options-with-gnome</link><description>&lt;p&gt;As I&amp;#39;ve &lt;a href=&quot;/posts/xmonad-ignores-bindings/#media-keys&quot;&gt;explained before&lt;/a&gt;, I use a keyboard without media keys, so I rebind three otherwise-unused keys to act as my media keys. I accomplish this on Gnome by using a custom XKB option that I &lt;a href=&quot;/posts/xmonad-ignores-bindings/#workaround&quot;&gt;created&lt;/a&gt;. I have to do this because the Gnome keyboard settings binder ignores the keys I want to bind for this particular purpose. I used to enable this XKB option by simply running a script at startup that enabled it, but I noticed that it was subject to either a race condition or a precedence issue. I&amp;#39;m more convinced it was the latter, as if the option that I enabled was overridden by Gnome&amp;#39;s own initialization of XKB. This suspicion seems to be confirmed by the Arch wiki page on &lt;a href=&quot;https://wiki.archlinux.org/index.php/Keyboard_Configuration_in_Xorg&quot;&gt;keyboard configuration&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This article describes low-level configuration using XKB which is effective in most cases, but some desktop environments like GNOME override it with its own settings.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;&lt;strong&gt;Arch Wiki&lt;/strong&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a result, I decided to look for a way to have my solution work alongside Gnome&amp;#39;s initialization of XKB. There was &lt;em&gt;very&lt;/em&gt; little information on Gnome&amp;#39;s interaction with XKB short of reading Gnome&amp;#39;s source, but after searching around for a long time, I found that there is indeed a dconf option hidden away at &lt;span class=&quot;path&quot;&gt;/org/gnome/desktop/input-sources/xkb-options&lt;/span&gt;. Before I could use this though, I had to make my XKB option available system-wide.&lt;/p&gt;

&lt;p&gt;First the symbol file has to be placed in the symbols directory &lt;span class=&quot;path&quot;&gt;/usr/share/X11/xkb/symbols&lt;/span&gt;. This file simply binds the keys I want to use to the XF86 designated media keys. This way the Gnome binder will pick them up without complaining when I bind them to the volume keys, since it otherwise seems to prevent the binding of these very keys as they are. In other words, with this symbol file, RCTRL will be interpreted by the system as if I had pressed XF86AudioRaiseVolume, which is what an actual volume-up media key would yield:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;partial hidden modifier_keys
xkb_symbols &quot;bottom_right&quot; {
  key &lt;RCTL&gt; { [ XF86AudioRaiseVolume ] };
  key &lt;MENU&gt; { [ XF86AudioLowerVolume ] };
  key &lt;RWIN&gt; { [ XF86AudioMute ] };
};
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Now an option has to be created for this symbol file and then listed in the system-wide options list for the rule set you&amp;#39;re using, in my case evdev, at &lt;span class=&quot;path&quot;&gt;/usr/share/X11/xkb/rules/evdev&lt;/span&gt;. Here, &lt;code&gt;volume_keys&lt;/code&gt; corresponds to the filename of the symbol file, and &lt;code&gt;bottom_right&lt;/code&gt; is the name I gave the group:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;volume_keys:bottom_right = +volume_keys(bottom_right)
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Now the option can be referenced system-wide, so it can be entered into the the Gnome XKB options dconf key at &lt;span class=&quot;path&quot;&gt;/org/gnome/desktop/input-sources/xkb-options&lt;/span&gt;. Put it inside the list as &lt;code&gt;&amp;#39;volume_keys:bottom_right&amp;#39;&lt;/code&gt;, for example mine is set to:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;[&apos;volume_keys:bottom_right&apos;, &apos;compose:ralt&apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;You can now go ahead and bind the appropriate keys to volume functions inside Gnome Setting&amp;#39;s keyboard section.&lt;/p&gt;

&lt;p&gt;Given that it&amp;#39;s tucked away deep inside dconf, and given Gnome developers&amp;#39; track record of pruning &amp;quot;cruft&amp;quot; or anything that the lowest common denominator user doesn&amp;#39;t use, the future availability of this option is in question. That said, it currently works perfectly fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: On archlinux, &lt;code&gt;pacman -Qo&lt;/code&gt; shows that the &lt;span class=&quot;path&quot;&gt;evdev&lt;/span&gt; file is owned by the &lt;a href=&quot;https://www.archlinux.org/packages/extra/any/xkeyboard-config/&quot;&gt;xkeyboard-config&lt;/a&gt; package. Whenever this package is updated, it overwrites this file, necessitating the change to be added once again. I&amp;#39;ll have to look into a more resilient way to have this setup.&lt;/p&gt;
</description><pubDate>2013-11-08</pubDate></item><item><title>Extra Dependencies in Hakyll</title><link>http://www.blaenkdenum.com/posts/extra-dependencies-in-hakyll</link><description>&lt;p&gt;I use &lt;a href=&quot;http://sass-lang.com/&quot;&gt;scss&lt;/a&gt; for my site&amp;#39;s stylesheets. scss is a language very similar to &lt;a href=&quot;https://en.wikipedia.org/wiki/Cascading_Style_Sheets&quot;&gt;CSS&lt;/a&gt; that adds support for variables, nesting, mixins, selector inheritance, and more---while retaining a syntax very similar to CSS itself.&lt;/p&gt;
&lt;h2 id=&quot;split-stylesheets&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#split-stylesheets&quot; class=&quot;header-link&quot;&gt;Split Stylesheets&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;A common practice I&amp;#39;ve noticed with the use of scss is to avoid having one monolithic stylesheet and instead opt to split it out into separate semantic files. For example, &lt;span class=&quot;path&quot;&gt;post.scss&lt;/span&gt; would concern styling for posts, &lt;span class=&quot;path&quot;&gt;syntax.scss&lt;/span&gt; would concern styling for Pygments syntax highlighting, etc. These files are then imported into one stylesheet, e.g., &lt;span class=&quot;path&quot;&gt;screen.scss&lt;/span&gt;, using the &lt;code&gt;@import&lt;/code&gt; directive. It is this stylesheet that gets compiled by the scss compiler into the monolithic CSS.&lt;/p&gt;
&lt;h2 id=&quot;problem&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#problem&quot; class=&quot;header-link&quot;&gt;Problem&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In Hakyll, rules are generally designated by a pattern that matches a resource coupled with a route and a compiler. So this was the rule I originally had for &lt;span class=&quot;path&quot;&gt;scss/screen.scss&lt;/span&gt;:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;scss/screen.scss&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constRoute&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;css/screen.css&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sassCompiler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;The rule simply states that Hakyll should:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;find the file &lt;span class=&quot;path&quot;&gt;scss/screen.scss&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;route it to &lt;span class=&quot;path&quot;&gt;css/screen.css&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;compile it using my custom &lt;code&gt;sassCompiler&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This worked fine, but it meant that when I built or previewed the site, if I modified one of the split stylesheets, such as &lt;span class=&quot;path&quot;&gt;post.scss&lt;/span&gt;, it wouldn&amp;#39;t regenerate the monolithic stylesheet. It would only do so if &lt;span class=&quot;path&quot;&gt;scss/screen.scss&lt;/span&gt; itself was modified.&lt;/p&gt;
&lt;h2 id=&quot;solution&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#solution&quot; class=&quot;header-link&quot;&gt;Solution&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;With the help of Hakyll&amp;#39;s creator, Jasper, I learned that the solution involves the use of &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hakyll/latest/doc/html/Hakyll-Core-Metadata.html#v:makePatternDependency&quot;&gt;&lt;code&gt;makePatternDependency&lt;/code&gt;&lt;/a&gt; to create a &lt;code&gt;Dependency&lt;/code&gt; from a given &lt;code&gt;Pattern&lt;/code&gt;, and &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hakyll/4.3.1.0/doc/html/Hakyll-Core-Rules.html#v:rulesExtraDependencies&quot;&gt;&lt;code&gt;rulesExtraDependencies&lt;/code&gt;&lt;/a&gt; to associate the dependencies with a specific &lt;code&gt;Compiler&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Advanced usage: add extra dependencies to compilers. Basically this is needed when you&amp;#39;re doing unsafe tricky stuff in the rules monad, but you still want correct builds.&lt;/p&gt;

&lt;p&gt;A useful utility for this purpose is &lt;code&gt;makePatternDependency&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;&lt;strong&gt;Jasper&lt;/strong&gt; on &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hakyll/4.3.1.0/doc/html/Hakyll-Core-Rules.html#v:rulesExtraDependencies&quot;&gt;Hackage&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now when I&amp;#39;m previewing my site---or build the site in general---and I modify any scss file, it correctly regenerates the monolithic &lt;span class=&quot;path&quot;&gt;css/screen.css&lt;/span&gt; file. Here&amp;#39;s my new scss compiler rule:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;scss/**.scss&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getResourceBody&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;scssDependencies&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makePatternDependency&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;scss/**.scss&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;rulesExtraDependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scssDependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;css/screen.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idRoute&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sassCompiler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</description><pubDate>2013-06-28</pubDate></item><item><title>Post Feed in Hakyll</title><link>http://www.blaenkdenum.com/posts/post-feed-in-hakyll</link><description>&lt;p&gt;When I made my site, specifically when I &lt;a href=&quot;/posts/the-switch-to-hakyll&quot;&gt;switched to Hakyll&lt;/a&gt;, I didn&amp;#39;t bother to include a &lt;a href=&quot;http://en.wikipedia.org/wiki/Web_feed&quot;&gt;syndication feed&lt;/a&gt; because I didn&amp;#39;t expect that anyone would care to want to subscribe to my site. However, someone &lt;a href=&quot;https://github.com/blaenk/blaenk.github.io/issues/1&quot;&gt;filed an issue&lt;/a&gt; concerning this on github. I knew Hakyll exposed a module specifically for this: &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hakyll/latest/doc/html/Hakyll-Web-Feed.html&quot;&gt;Hakyll.Web.Feed&lt;/a&gt;. It was more a matter of implementing it in a straightforward manner with the least duplication of work.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;#39;d like to subscribe to your blog, but I can&amp;#39;t seem to find an RSS feed (nor the Hakyll code to generate one). Would you consider adding one?&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;&lt;strong&gt;Nathan&lt;/strong&gt; on &lt;a href=&quot;https://github.com/blaenk/blaenk.github.io/issues/1&quot;&gt;Issue #1&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;considerations&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#considerations&quot; class=&quot;header-link&quot;&gt;Considerations&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;If I used my custom post compiler, it would include the table of contents and Pygments highlighted code. This was a problem because the table of contents didn&amp;#39;t work correctly in &lt;a href=&quot;https://yoleoreader.com/&quot;&gt;the feed reader&lt;/a&gt; I tested with and so just served to waste space. Worse, code blocks were completely absent from the feed reader. Finally, posts containing math type---which is rendered with &lt;a href=&quot;http://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt; on this site---did not render at all in the feed reader.&lt;/p&gt;

&lt;p&gt;So it was obvious to me that I had to compile the posts meant for the syndication feed with a more vanilla Pandoc compiler. However, I did want to keep the abbreviation substitution filter as that seemed to work perfectly fine.&lt;/p&gt;

&lt;p&gt;Because I needed to compile the posts with an entirely different Pandoc compiler, I knew that already I was duplicating some effort. Knowing this, I wanted to make sure to save as much work as possible to avoid further duplicate effort.&lt;/p&gt;
&lt;h2 id=&quot;drying-up&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#drying-up&quot; class=&quot;header-link&quot;&gt;Drying Up&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Since I wanted to use the abbreviation substitution filter in both the feed and regular post compiler, I knew that it was a potential location of duplicate effort. Both compilers would start something like this:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getResourceBody&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withItemBody&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abbreviationFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pandocCompiler&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- or pandocFeedCompiler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;So it would have been preferable if I could save the state of the &lt;code&gt;Item&lt;/code&gt; (i.e. post) as it was right after abbreviation substitution. Fortunately, Hakyll has support for this in the form of &lt;em&gt;snapshots&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The solution was to save a snapshot of the post from the regular compiler for posts after it had been through the abbreviation substitution &lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postsPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;niceRoute&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;posts/&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getResourceBody&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withItemBody&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abbreviationFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveSnapshot&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;abbreviated&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pandocCompiler&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id=&quot;implementation&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#implementation&quot; class=&quot;header-link&quot;&gt;Implementation&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;This meant that I could now refer to the &amp;quot;abbreviated&amp;quot; snapshot of any post. All I had to do now was to define a &lt;code&gt;Rule&lt;/code&gt; to compile posts specifically for the syndication feed. Hakyll also has support for this in the form of &lt;em&gt;versions&lt;/em&gt;, in which one can compile different versions of the same thing and refer to them later on.&lt;/p&gt;

&lt;p&gt;So what I do in the &amp;quot;feed&amp;quot; version of the post compiler was to get the underlying &lt;code&gt;Identifier&lt;/code&gt; for the given post and load the &amp;quot;abbreviated&amp;quot; snapshot of the version of that post that has no name, i.e. the version of the post compiled by the regular post compiler.&lt;/p&gt;

&lt;p&gt;I then pass that snapshot to &lt;code&gt;pandocFeedCompiler&lt;/code&gt; which is simply a more vanilla Pandoc compiler that removes the table of contents sentinel value I use, doesn&amp;#39;t generate the table of contents, doesn&amp;#39;t highlight code with Pygments, and uses regular superscripts etc. instead of MathJax:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postsPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;feed&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ident&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getUnderlying&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loadSnapshot&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setVersion&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ident&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;abbreviated&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemBody&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pandocFeedCompiler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;All that was left to do was to create the &lt;code&gt;atom.xml&lt;/code&gt; file. An ephemeral &lt;code&gt;Context&lt;/code&gt; is created to denote that the &lt;code&gt;$description$&lt;/code&gt; tag should be filled with the body of the post, as the syndication feed rendering functions in Hakyll expect. All &amp;quot;feed&amp;quot; versions of posts are loaded, sorted in reverse chronological order, and the first ten are taken. Finally the function &lt;code&gt;renderAtom&lt;/code&gt; actually generates the XML from all of this information:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;atom.xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idRoute&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feedCtx&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postCtx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bodyField&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recentFirst&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadAll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postsPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&amp;amp;&amp;amp;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasVersion&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;feed&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;renderAtom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feedConf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feedCtx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id=&quot;caveat&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#caveat&quot; class=&quot;header-link&quot;&gt;Caveat&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Notice that we are using the &amp;quot;feed&amp;quot; versions of posts to render the syndication feed. This poses a problem, because the &lt;a href=&quot;https://github.com/jaspervdj/hakyll/blob/master/data/templates/atom-item.xml&quot;&gt;atom feed template&lt;/a&gt; requires access to the &lt;code&gt;$url$&lt;/code&gt; field, but notice that the &amp;quot;feed&amp;quot; version is &lt;em&gt;not&lt;/em&gt; routed.&lt;/p&gt;

&lt;p&gt;This means that a &lt;code&gt;Route&lt;/code&gt; is not created for &amp;quot;feed&amp;quot; versions, and as a result the &lt;code&gt;$url$&lt;/code&gt; will be an empty string, so the link to individual stories in the feed will just link to the site root!&lt;/p&gt;

&lt;p&gt;This becomes apparent when you look at the implementation of &lt;code&gt;urlField&lt;/code&gt;, which is defined in &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hakyll/latest/doc/html/Hakyll-Web-Template-Context.html&quot;&gt;Hakyll.Web.Template.Context&lt;/a&gt;:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;urlField&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;urlField&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemIdentifier&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;First it gets the &lt;code&gt;Item&lt;/code&gt;&amp;#39;s &lt;code&gt;Identifier&lt;/code&gt;, and then it gets that &lt;code&gt;Identifier&lt;/code&gt;&amp;#39;s &lt;code&gt;Route&lt;/code&gt;. The problem is that since we&amp;#39;re using a different version of the post, the &lt;code&gt;Identifier&lt;/code&gt; will be different, and there won&amp;#39;t be a &lt;code&gt;Route&lt;/code&gt; associated with that &lt;code&gt;Identifier&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I actually use a slightly different &lt;code&gt;urlField&lt;/code&gt;-type function, which I called &lt;a href=&quot;https://github.com/blaenk/blaenk.github.io/blob/1379be96c66de626b2623d0b09ce32e065da4f49/src/Site/Fields.hs#L80&quot;&gt;&lt;code&gt;niceUrlField&lt;/code&gt;&lt;/a&gt;, it simply returns the URL without the &lt;code&gt;index.html&lt;/code&gt; at the end. However, the solution to this problem is the same in both functions.&lt;/p&gt;

&lt;p&gt;The solution is to get the no-name version of the &lt;code&gt;Identifier&lt;/code&gt; that is retrieved, that is, the version of the post without an explicit version---the version that was compiled normally. This is done using the &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hakyll/latest/doc/html/Hakyll-Core-Identifier.html#v:setVersion&quot;&gt;&lt;code&gt;setVersion&lt;/code&gt;&lt;/a&gt; function. The function can be changed to this:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;urlField&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;urlField&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setVersion&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemIdentifier&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;This successfully retrieves the correct URL of the post, just make sure you &lt;code&gt;mappend&lt;/code&gt; this alternate function in your feed&amp;#39;s &lt;code&gt;Context&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#conclusion&quot; class=&quot;header-link&quot;&gt;Conclusion&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s a shame that some duplicate work seems necessary when it comes to compiling the post. That is, I have to compile every post using my special Pandoc compiler, and then again using the more vanilla feed compiler I made. I tried to balance this by saving effort at the very least with the abbreviation substitution filter, so that it only runs once on every post.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;If you&amp;#39;re wondering what &lt;code&gt;postsPattern&lt;/code&gt; is, refer to my &lt;a href=&quot;/posts/drafts-in-hakyll&quot;&gt;Drafts in Hakyll&lt;/a&gt; post, in which this value is used to determine from where to pull posts in, in order to facilitate a draft preview system.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description><pubDate>2013-06-19</pubDate></item><item><title>Drafts in Hakyll</title><link>http://www.blaenkdenum.com/posts/drafts-in-hakyll</link><description>&lt;p&gt;In the post about my &lt;a href=&quot;/posts/the-switch-to-hakyll&quot;&gt;switch to Hakyll&lt;/a&gt; I talked about the various features I implemented in my Hakyll blog. One feature that was sorely missing was support for drafts: posts which aren&amp;#39;t supposed to be published when the site is deployed.&lt;/p&gt;

&lt;p&gt;I usually take my time writing posts. Sometimes it can take me days, during which I might want to deploy other minor changes to the site, or perhaps even a shorter, quicker post. Without a draft system, I&amp;#39;m forced to manually move the draft post out of the provider directory so that it doesn&amp;#39;t get generated and subsequently deployed.&lt;/p&gt;

&lt;p&gt;A draft system is able to clearly distinguish draft posts from regular posts. This way, when it comes to deploying the site, draft posts aren&amp;#39;t deployed along with it.&lt;/p&gt;
&lt;h2 id=&quot;considerations&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#considerations&quot; class=&quot;header-link&quot;&gt;Considerations&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I believe that the fundamental problem with draft systems in static site generators is that drafts, like regular posts, come to permeate the entire site. They accomplish this by showing up on index pages, tag pages, and any other place you might expect regular posts to show up in. This is something to keep in mind when creating a draft system because it means that simply deleting the compiled page won&amp;#39;t suffice, as there will still be traces in other pages.&lt;/p&gt;

&lt;p&gt;One approach to this problem is to quarantine the draft posts such that they don&amp;#39;t show up on any of these things and instead only show them when you visit them directly. This is not an option for me because when I preview drafts I want to see how they will affect the entire site. I don&amp;#39;t preview drafts simply to check how my post is formatted.&lt;/p&gt;
&lt;h2 id=&quot;examples&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#examples&quot; class=&quot;header-link&quot;&gt;Examples&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The following two draft system implementations exemplify the two approaches I can think of for a draft system. These are approaches taken by static site generators. There are other ad hoc solutions, such as creating a separate &lt;code&gt;drafts&lt;/code&gt; branch in git.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt; had support for drafts hacked onto Jekyll by way of a plugin that allowed a metadata field &lt;code&gt;published&lt;/code&gt; to be set that, if set to &lt;strong&gt;false&lt;/strong&gt;, would establish an environment variable that would be detected on site generation in order to regenerate the site without the draft posts. This consequently meant that draft posts were stored in the same directory as regular posts.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; implemented support for this in its 1.0 version by allowing a new directory, &lt;span class=&quot;path&quot;&gt;_drafts/&lt;/span&gt;, to store draft posts which could be previewed by specifying the &lt;code&gt;--drafts&lt;/code&gt; flag to most operations. However, it was right after Jekyll 1.0 was released that I decided to switch to Hakyll.&lt;/p&gt;

&lt;p&gt;Octopress&amp;#39; draft system was pretty straightforward in my opinion, despite being a pretty hack-ish implementation. I would create drafts in the same directory as all of the other posts, and would simply set metadata &lt;code&gt;published: false&lt;/code&gt;. This would allow the draft to show up when I previewed the site, but not when it was ultimately deployed. This was accomplished by regenerating the site on deploy, this time without the preview posts.&lt;/p&gt;

&lt;p&gt;The other solution I could think of consisted of detecting when the site was being previewed, and if that were the case, establish a different output directory and a different posts pattern which would include the posts in a separate &lt;span class=&quot;path&quot;&gt;drafts/&lt;/span&gt; directory. When the site &lt;em&gt;wasn&amp;#39;t&lt;/em&gt; being previewed, the regular output directory would be used.&lt;/p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#implementation&quot; class=&quot;header-link&quot;&gt;Implementation&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Both approaches amount to hacks on top of Hakyll, but after some consideration, it seems to me that the second option is a lot less messy.&lt;/p&gt;

&lt;p&gt;My solution consists of some code that runs before the Hakyll driver. The code extracts the first argument from the program arguments, which by convention is the action to perform, e.g. build, clean, preview, and checks to see if it&amp;#39;s the &lt;strong&gt;preview&lt;/strong&gt; action.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getArgs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;If the &lt;strong&gt;preview&lt;/strong&gt; action is being run, the Hakyll configuration data structure&amp;#39;s &lt;code&gt;destinationDirectory&lt;/code&gt; field, i.e. the output directory, is changed to a separate one for previewing purposes. This implies that the field is set to the deployable output directory by default. This is important because it means that all actions other than &lt;strong&gt;preview&lt;/strong&gt; will &lt;em&gt;ignore&lt;/em&gt; drafts.&lt;/p&gt;

&lt;p&gt;Furthermore, if we are previewing, the pattern used to fetch posts is changed to also include the posts in the &lt;span class=&quot;path&quot;&gt;drafts/&lt;/span&gt; directory. This is achieved by using the &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hakyll/4.2.2.0/doc/html/Hakyll-Core-Identifier-Pattern.html#v:.-38--38-.&quot;&gt;&lt;code&gt;.||.&lt;/code&gt;&lt;/a&gt; function to compose two &lt;code&gt;Pattern&lt;/code&gt; types.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previewMode&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;preview&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hakyllConf&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previewMode&lt;/span&gt;
                     &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myHakyllConf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destinationDirectory&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;generated/preview&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                     &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myHakyllConf&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;postsPattern&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previewMode&lt;/span&gt;
                     &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;posts/*&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.||.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;drafts/*&amp;quot;&lt;/span&gt;
                     &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;posts/*&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Finally, we need to make one modification to an existing action. The &lt;strong&gt;clean&lt;/strong&gt; action removes the provider, cache, and destination (output) directories. However, we now have two separate destination directories and by default every other action only knows of the deployable destination directory, i.e. the one without drafts. For this reason, we have to detect if the action being run is &lt;strong&gt;clean&lt;/strong&gt;, and if so, remove the preview output directory.&lt;/p&gt;

&lt;p&gt;Note that this depends on &lt;a href=&quot;http://hackage.haskell.org/packages/archive/directory/latest/doc/html/System-Directory.html&quot;&gt;&lt;code&gt;System.Directory&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;  &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;clean&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Removing generated/preview...&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;removeDirectoryRecursive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;generated/preview&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Now that this is done, you simply have to be sure to use the &lt;code&gt;hakyllConf&lt;/code&gt; that was created above, as well as &lt;code&gt;postsPattern&lt;/code&gt; wherever you would have simply put &lt;code&gt;&amp;quot;posts/*&amp;quot;&lt;/code&gt; before. Two places that come to mind are tag generation and posts compilation:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;  &lt;span class=&quot;n&quot;&gt;hakyllWith&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hakyllConf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildTags&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postsPattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromCapture&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;tags/*.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postsPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;-- etc.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id=&quot;usage&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#usage&quot; class=&quot;header-link&quot;&gt;Usage&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;This drafts system is pretty straightforward. When you run &lt;code&gt;./site preview&lt;/code&gt; it&amp;#39;ll serve the site with drafts as well. Deployment carries on as usual, i.e. you shouldn&amp;#39;t have to modify your deployment routine. With this system, you&amp;#39;ll never accidentally deploy drafts because they won&amp;#39;t ever show up in that output directory to begin with.&lt;/p&gt;
</description><pubDate>2013-06-05</pubDate></item><item><title>The Switch to Hakyll</title><link>http://www.blaenkdenum.com/posts/the-switch-to-hakyll</link><description>&lt;p&gt;This site was originally built with &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. Technically I began with the pre-packaged distribution known as &lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt; which offered a Rakefile for common tasks as well as an out-of-the-box directory structure. I didn&amp;#39;t use many of these features, however, so I had been wanting to shed traces of Octopress, partly motivated by the pursuit of increased speed in site generation. I found the opportunity to do this when Jekyll 1.0 was released recently.&lt;/p&gt;

&lt;nav id=&quot;toc&quot;&gt;
&lt;h3&gt;Contents&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;#file-structure&quot;&gt;File Structure&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#hakyll&quot;&gt;Hakyll&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;#scss&quot;&gt;SCSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#abbreviations&quot;&gt;Abbreviations&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#git-tag&quot;&gt;Git Tag&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#pandoc&quot;&gt;Pandoc&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;#pygments&quot;&gt;Pygments&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;#alternatives&quot;&gt;Alternatives&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#implementation&quot;&gt;Implementation&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#deploying&quot;&gt;Deploying&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/nav&gt;

&lt;p&gt;To cut away the unnecessary components of Octopress, I decided to go through every file and keep only what I absolutely needed. This is evident in commits after &lt;a href=&quot;https://github.com/blaenk/blaenk.github.com.jekyll/commit/712168ec33004b693cc8cfb553a6a861da6a8708&quot;&gt;&lt;code&gt;712168ec&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was well on my way to making the site&amp;#39;s source a lot leaner when I remembered that I had been wanting to try &lt;a href=&quot;http://jaspervdj.be/hakyll/&quot;&gt;Hakyll&lt;/a&gt;, a static site generator written in Haskell that I had heard about on Hacker News. Given that I was more or less starting the site from scratch, I figured it was the perfect opportunity to try it.&lt;/p&gt;

&lt;p&gt;Ultimately, this site is now compiled with Hakyll. It took me about a week to implement every feature I wanted in Hakyll and Pandoc. The net effect is that the difference in speed and flexibility is highly appreciable.&lt;/p&gt;
&lt;h2 id=&quot;file-structure&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#file-structure&quot; class=&quot;header-link&quot;&gt;File Structure&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Oftentimes when new to a system, learning its directory structure can help one to get oriented. Unlike some other static site generators, Hakyll does not enforce any particular directory structure or convention. The one I have adopted for my &lt;a href=&quot;https://github.com/blaenk/blaenk.github.io&quot;&gt;repository&lt;/a&gt; looks like this:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;Entry&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;provider/&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;compilable content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;src/&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Hakyll, Pandoc customizations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Setup.hs&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;build type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;blaenk.cabal&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;dependency management&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;readme.markdown&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;repository information&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I build the site binary with &lt;code&gt;cabal build&lt;/code&gt; which results in a new top-level directory &lt;span class=&quot;path&quot;&gt;dist/&lt;/span&gt;, which stores the object files generated by GHC. The &lt;code&gt;site&lt;/code&gt; binary, stored at the top level, is the actual binary which is used for generating and manipulating the site. This binary has a variety of options, the ones I commonly use are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;Option&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;build&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Generate the entire site&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;preview&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Generate changes on-the-fly and serve them on a preview server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;deploy&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Deploy the site using a custom deploy procedure&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Build&lt;/strong&gt; creates a top-level directory &lt;span class=&quot;path&quot;&gt;generated/&lt;/span&gt; with two sub-directories: a directory &lt;span class=&quot;path&quot;&gt;cache/&lt;/span&gt; for cached content and a directory &lt;span class=&quot;path&quot;&gt;site/&lt;/span&gt; where the compiled site is stored.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploy&lt;/strong&gt; puts the compiled site into top-level directory &lt;span class=&quot;path&quot;&gt;deploy/&lt;/span&gt; which is git-controlled and force pushes the content to the master branch, effectively deploying (on GitHub).&lt;/p&gt;
&lt;h2 id=&quot;hakyll&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#hakyll&quot; class=&quot;header-link&quot;&gt;Hakyll&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;As I mentioned earlier, Hakyll is a static site generator written in Haskell. Hakyll sites are fleshed out using a Haskell &lt;a href=&quot;http://www.haskell.org/haskellwiki/EDSL&quot;&gt;Embedded Domain Specific Language&lt;/a&gt; (EDSL). This EDSL is used to declare rules for different patterns which should be searched for within the provider directory and what should be done with them.&lt;/p&gt;

&lt;p&gt;For example, in the following Hakyll program:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hakyll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;images/*&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;idRoute&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copyFileCompiler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;match &amp;quot;images/*&amp;quot;&lt;/code&gt; is a &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hakyll/latest/doc/html/Hakyll-Core-Rules.html&quot;&gt;&lt;code&gt;Rule&lt;/code&gt;&lt;/a&gt; that states that the provider directory should match all files matching the glob &lt;code&gt;images/*&lt;/code&gt;, &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hakyll/latest/doc/html/Hakyll-Core-Routes.html&quot;&gt;&lt;code&gt;Route&lt;/code&gt;&lt;/a&gt; them using the &lt;code&gt;idRoute&lt;/code&gt;, and compile them using the &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hakyll/latest/doc/html/Hakyll-Core-Compiler.html&quot;&gt;&lt;code&gt;Compiler&lt;/code&gt;&lt;/a&gt; &lt;code&gt;copyFileCompiler&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Routing a file in the context of a static site generator like Hakyll refers to the mapping between the file as it sits in the provider directory and its name/path in the compiled directory; in this case, &lt;code&gt;idRoute&lt;/code&gt; keeps the same name/path in the compiled directory.&lt;/p&gt;

&lt;p&gt;Compiling a file in this context refers to the operations that should be performed on the contents of the file, for example processing through Pandoc for Markdown to HTML generation, or in this case, simply copying the file from the provider directory to the compiled directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Compiler&lt;/code&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Monad_%28functional_programming%29&quot;&gt;Monad&lt;/a&gt;, which allows for seamless chaining of operations that should be performed on any given file. For example, here is my &lt;code&gt;Rule&lt;/code&gt; for regular posts:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;posts/*&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nicePostRoute&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getResourceBody&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withItemBody&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abbreviationFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pandocCompiler&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadAndApplyTemplate&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;templates/post.html&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tagsCtx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postCtx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadAndApplyTemplate&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;templates/layout.html&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postCtx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;This states that the compilation process for any given post is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the post body (i.e. excluding post metadata) is read&lt;/li&gt;
&lt;li&gt;the result is passed to an abbreviation substitution filter&lt;/li&gt;
&lt;li&gt;the result is passed to my custom Pandoc compiler&lt;/li&gt;
&lt;li&gt;the result is embedded into a post template with a so called &amp;quot;post context&amp;quot;&lt;/li&gt;
&lt;li&gt;the result is embedded into the page layout&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A post is routed using the &lt;code&gt;nicePostRoute&lt;/code&gt; function which is largely borrowed from &lt;a href=&quot;http://yannesposito.com/Scratch/en/blog/Hakyll-setup/&quot;&gt;Yann Esposito&lt;/a&gt;. It simply routes a &lt;span class=&quot;path&quot;&gt;posts/this-post.markdown&lt;/span&gt; to &lt;span class=&quot;path&quot;&gt;posts/this-post/index.html&lt;/span&gt; so that the post can be viewed at &lt;span class=&quot;path&quot;&gt;posts/this-post/&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;An interesting thing to note is that when templates are applied, they are supplied a &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hakyll/latest/doc/html/Hakyll-Web-Template-Context.html&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt;. A &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hakyll/latest/doc/html/Hakyll-Web-Template-Context.html&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; is simply a &lt;a href=&quot;http://en.wikipedia.org/wiki/Monoid&quot;&gt;Monoid&lt;/a&gt; that encapsulates a key (i.e. &lt;code&gt;String&lt;/code&gt; identifier for the field) and an &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hakyll/latest/doc/html/Hakyll-Core-Item.html&quot;&gt;&lt;code&gt;Item&lt;/code&gt;&lt;/a&gt;. During application of the template, if a field of the form &lt;code&gt;$key$&lt;/code&gt; is encountered, the supplied &lt;code&gt;Context&lt;/code&gt; is searched for an appropriate handler (i.e. one with the same key). If one is found, the item is passed to that &lt;code&gt;Context&lt;/code&gt;&amp;#39;s handler and the result is substituted into the template.&lt;/p&gt;

&lt;p&gt;In the above &lt;code&gt;Rule&lt;/code&gt; for posts, I pass a pre-crafted post &lt;code&gt;Context&lt;/code&gt;, &lt;code&gt;postCtx&lt;/code&gt;, and &lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Monoid.html#v:mappend&quot;&gt;&lt;code&gt;mappend&lt;/code&gt;&lt;/a&gt; to it a special tags context, &lt;code&gt;tagsCtx&lt;/code&gt; which encapsulates tags information for that post.&lt;/p&gt;
&lt;h3 id=&quot;scss&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#scss&quot; class=&quot;header-link&quot;&gt;SCSS&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;The first customization I made was to allow support for &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SCSS&lt;/a&gt;. This is usually possible with a simple line:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;getResourceString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withItemBody&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unixFilter&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sass&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;-s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--scss&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;This works fine in POSIX environments, of which Linux is my primary environment for development. However, it&amp;#39;s very useful to me to have Windows support as well. The problem is that on Windows, ruby gem binaries---such as &lt;code&gt;scss&lt;/code&gt;---are implemented using batch file stubs. The underlying function used for creating the process in &lt;code&gt;unixFilter&lt;/code&gt; is &lt;a href=&quot;http://hackage.haskell.org/packages/archive/process/latest/doc/html/System-Process.html&quot;&gt;System.Process&lt;/a&gt;&amp;#39; &lt;a href=&quot;http://hackage.haskell.org/packages/archive/process/latest/doc/html/System-Process.html#v:createProcess&quot;&gt;&lt;code&gt;createProcess&lt;/code&gt;&lt;/a&gt;, specifically with the &lt;code&gt;proc&lt;/code&gt; type. On Windows, this uses the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms682425.aspx&quot;&gt;&lt;code&gt;CreateProcess&lt;/code&gt;&lt;/a&gt; function. Using this function, batch files are not run unless they are run explicitly with &lt;code&gt;cmd.exe /c batchfile&lt;/code&gt;. The problem is that there is no simple way to find the file path of the batch file stub for &lt;code&gt;scss&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The solution to this is to use the &lt;code&gt;shell&lt;/code&gt; type with &lt;code&gt;createProcess&lt;/code&gt; instead of &lt;code&gt;proc&lt;/code&gt;. This has the effect of a &lt;code&gt;system&lt;/code&gt; call, where the parameter is interpreted by the shell, in Windows&amp;#39; case, &lt;code&gt;cmd.exe&lt;/code&gt;. As a result, the program can simply be called as &lt;code&gt;scss&lt;/code&gt;, leaving the shell to automatically run the appropriate batch file stub.&lt;/p&gt;

&lt;p&gt;To accomplish this, I had to implement what was essentially a mirror copy of &lt;a href=&quot;http://hackage.haskell.org/packages/archive/hakyll/latest/doc/html/Hakyll-Core-UnixFilter.html&quot;&gt;Hakyll.Core.UnixFilter&lt;/a&gt; with &lt;code&gt;proc&lt;/code&gt; switched out with &lt;code&gt;shell&lt;/code&gt;. I&amp;#39;ll be suggesting a pull request upstream soon which gives the user the option and removes the duplicate code. Now I can implement an SCSS compiler like the following, though I additionally pass it a few extra parameters in my actual implementation:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;getResourceString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withItemBody&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellFilter&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sass -s --scss&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h3 id=&quot;abbreviations&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#abbreviations&quot; class=&quot;header-link&quot;&gt;Abbreviations&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;One feature I missed from &lt;a href=&quot;http://kramdown.rubyforge.org/&quot;&gt;kramdown&lt;/a&gt; that wasn&amp;#39;t available in my new markdown processor, &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;Pandoc&lt;/a&gt;, was abbreviation substitution. It consists of writing abbreviation definitions which are then used to turn every occurrence of the abbreviation into a proper &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr&quot;&gt;&lt;code&gt;abbr&lt;/code&gt;&lt;/a&gt; HTML tag with an accompanying tooltip consisting of the definition.&lt;/p&gt;

&lt;p&gt;I had hardly used regular expressions in Haskell before, so the method of using it was pretty confusing to me at first. There&amp;#39;s a base regex package called &lt;a href=&quot;http://hackage.haskell.org/package/regex-base&quot;&gt;regex-base&lt;/a&gt; which exposes a common interface API, and then there are a variety of backend implementations. Hakyll happens to use &lt;a href=&quot;http://hackage.haskell.org/package/regex-tdfa&quot;&gt;regex-tdfa&lt;/a&gt;, a fast and popular backend, so I decided to use that one instead of introducing additional dependencies.&lt;/p&gt;

&lt;p&gt;One way of using regular expressions in Haskell is through type inference, as is described in the &lt;a href=&quot;http://hackage.haskell.org/packages/archive/regex-base/latest/doc/html/Text-Regex-Base-Context.html&quot;&gt;Text.Regex.Base.Context&lt;/a&gt; documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This module name is Context because they [sic] operators are context dependent: use them in a context that expects an Int and you get a count of matches, use them in a Bool context and get True if there is a match, etc. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Keeping this in mind, I explicitly annotated the &lt;code&gt;[[String]]&lt;/code&gt; type since I wanted every match and sub-match. I created a function &lt;code&gt;abbreviationReplace&lt;/code&gt; that takes a &lt;code&gt;String&lt;/code&gt;, removes the abbreviation definitions, and then creates &lt;code&gt;abbr&lt;/code&gt; tags out of every occurrence of the abbreviation using the parsed definitions.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;abbreviationReplace&lt;/code&gt; function begins like this:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;abbreviationReplace&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;abbreviationReplace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[(.+)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]: (.+)$&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h3 id=&quot;git-tag&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#git-tag&quot; class=&quot;header-link&quot;&gt;Git Tag&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;In a &lt;a href=&quot;/posts/commit-tag-for-jekyll/&quot;&gt;previous post&lt;/a&gt; I talked about a liquid tag I created for Jekyll which inserts the SHA of the commit on which the site was last generated. I have come to like this small feature of my site. It&amp;#39;s not some tacky &amp;quot;Powered by blah&amp;quot; footer. It&amp;#39;s pretty unobtrusive. It seems unimportant to people who wouldn&amp;#39;t understand what it&amp;#39;s about, and those who would understand it might immediately recognize its purpose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I have stopped including the git commit in the footer of every page. The problem with doing this was that, in order to have every page reflect the new commit, I had to regenerate every page before deploy. This obviously doesn&amp;#39;t scale well once more and more pages are added to the site. Instead I have adopted a per-post commit and history link which I believe is a lot more meaningful and meshes perfectly well with generation of pages, i.e. if a post is modified, there&amp;#39;ll be a commit made for it and since it was modified it will have to be regenerated anyways. Now I simply include social links in the footer.&lt;/p&gt;

&lt;p&gt;One thing I forgot to update the previous post about was that I ended up switching from using the Rugged git-bindings for Ruby to just using straight up commands and reading their output. The reason for doing this was that, while everything worked perfectly fine on Linux, Rugged had problems building on Windows. It turned out that taking this approach ended up being simpler and had the added benefit of decreasing my dependencies.&lt;/p&gt;

&lt;p&gt;The equivalent of a liquid tag in Jekyll would be a field, expressed as a &lt;code&gt;Context&lt;/code&gt;. For this reason I created the &lt;code&gt;gitTag&lt;/code&gt; function that takes a desired key, such as &lt;code&gt;git&lt;/code&gt;, which would be used as &lt;code&gt;$git$&lt;/code&gt; in templates, and returns a &lt;code&gt;Context&lt;/code&gt; which returns the &lt;code&gt;String&lt;/code&gt; of formatted HTML. One problem was that to do this I had to use &lt;code&gt;IO&lt;/code&gt;, so I needed some way to escape the &lt;code&gt;Compiler&lt;/code&gt; Monad. It turned out that Hakyll already had a function for something like this called &lt;code&gt;unsafeCompiler&lt;/code&gt;, which it uses for &lt;code&gt;UnixFilter&lt;/code&gt; for example.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what &lt;code&gt;gitTag&lt;/code&gt; looks like:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;gitTag&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;gitTag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unsafeCompiler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sha&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readProcess&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;git&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;HEAD&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--pretty=format:%H&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readProcess&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;git&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;HEAD&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--pretty=format:%s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;a href=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://github.com/blaenk/blaenk.github.io/commit/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; title=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;/a&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id=&quot;pandoc&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#pandoc&quot; class=&quot;header-link&quot;&gt;Pandoc&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Hakyll configuration is fairly straightforward. What took longer was the process of re-implementing some features that I had in &lt;a href=&quot;http://kramdown.rubyforge.org/&quot;&gt;kramdown&lt;/a&gt; when I used Jekyll that weren&amp;#39;t available in my new document processor, &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;Pandoc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pandoc is a very interesting project that basically works by parsing input documents into a common intermediate form represented as an abstract syntax tree (AST). This AST can then be used to generate an output document in a variety of formats. In this spirit, I feel it&amp;#39;s a lot like the &lt;a href=&quot;http://llvm.org/&quot;&gt;LLVM&lt;/a&gt; project. It seems to me that it has been gaining popularity especially from an end-user perspective (i.e. using the &lt;code&gt;pandoc&lt;/code&gt; binary), commonly used to do things such as write manual pages in markdown or generate ebooks.&lt;/p&gt;

&lt;p&gt;The very nature of how Pandoc transforms input documents into an AST lends itself to straight-forward AST transformations. I have created two such transformations so far: one for Pygments syntax-highlighting and another for fancy table of contents generation.&lt;/p&gt;

&lt;p&gt;One of the things I needed to implement, however, was the abbreviation substitution described above. I would have implemented it as a Pandoc customization, but Pandoc has no representation for abbreviations in its abstract syntax tree. This was why I implemented it as a Hakyll compiler instead, using simple regular expressions.&lt;/p&gt;

&lt;p&gt;There is actually work towards implementing abbreviation substitution according to the &lt;a href=&quot;http://johnmacfarlane.net/pandoc/README.html&quot;&gt;readme&lt;/a&gt; under the section &amp;quot;Extension: abbrevations&amp;quot; [sic] but it says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the pandoc document model does not support abbreviations, so if this extension is enabled, abbreviation keys are simply skipped (as opposed to being parsed as paragraphs).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;pygments&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#pygments&quot; class=&quot;header-link&quot;&gt;Pygments&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: This has been through two redesigns since this was written. The first involved an fs-backed caching system, but this was still too slow, since the bottleneck seemed to be caused by continuously spawning a new pygmentize process. Most recently I&amp;#39;ve created a pygments server that the site opens alongside it at launch, and this Pandoc AST transformer communicates with it through its stdout/stdin handles. It works perfectly and the site compiles a lot quicker. It also fully supports UTF-8:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;¥ · £ · € · $ · ¢ · ₡ · ₢ · ₣ · ₤ · ₥ · ₦ · ₧ · ₨ · ₩ · ₪ · ₫ · ₭ · ₮ · ₯ · ₹
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;One of the first things I wanted to implement right away was syntax highlighting with &lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt;. There are a variety of options for syntax highlighting. In fact, Pandoc comes with support for &lt;a href=&quot;http://johnmacfarlane.net/highlighting-kate/&quot;&gt;kate&lt;/a&gt;: a Haskell package for syntax highlighting written by the author of Pandoc. However, I don&amp;#39;t find it to be on par with Pygments. In the past, I simply posted code to &lt;a href=&quot;https://gist.github.com/&quot;&gt;gist&lt;/a&gt; and then embedded it into posts. This caused unnecessary overhead and more importantly, would break my site when github made changes to the service.&lt;/p&gt;

&lt;p&gt;Eventually I realized that github just uses Pygments underneath, so I implemented a Pandoc AST transformer that finds every &lt;a href=&quot;http://hackage.haskell.org/packages/archive/pandoc-types/latest/doc/html/Text-Pandoc-Definition.html#t:Block&quot;&gt;&lt;code&gt;CodeBlock&lt;/code&gt;&lt;/a&gt;, extracts the code within it, passes it to Pygments, and replaces that &lt;code&gt;CodeBlock&lt;/code&gt; with a &lt;code&gt;RawBlock&lt;/code&gt; containing the raw HTML output by Pygments. I also implemented a way to specify an optional caption which is shown under the code block. I use &lt;a href=&quot;http://jaspervdj.be/blaze/&quot;&gt;blaze-html&lt;/a&gt; for the parts where I need to hand-craft HTML.&lt;/p&gt;

&lt;p&gt;Ultimately, this all means that I can write code blocks like this in markdown:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;``` haskell
testFunction :: String -&gt; Integer
```
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Or, with a caption:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;``` ruby: some caption
args.map! {|arg| arg.upcase}
```
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;One thing I had to do was invoke &lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/System-IO-Unsafe.html#v:unsafePerformIO&quot;&gt;&lt;code&gt;unsafePerformIO&lt;/code&gt;&lt;/a&gt; in the function I created which runs the code through &lt;code&gt;pygmentize&lt;/code&gt;, an end-user binary for the Pygments library. I&amp;#39;m not sure if there&amp;#39;s a better way to do this, but my justification for using it is that Pygments should return the same output for any given input. If it doesn&amp;#39;t, then there are probably larger problems.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;pygmentize&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;pygmentize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsafePerformIO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;I don&amp;#39;t feel particularly worried about it, given my justification. It&amp;#39;s a similar justification used by Real World Haskell when &lt;a href=&quot;http://book.realworldhaskell.org/read/interfacing-with-c-the-ffi.html#id655783&quot;&gt;creating bindings&lt;/a&gt; for &lt;a href=&quot;http://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions&quot;&gt;PCRE&lt;/a&gt; with the foreign function interface:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It lets us say to the compiler, &amp;quot;I know what I&amp;#39;m doing - this code really is pure&amp;quot;. For regular expression compilation, we know this to be the case: given the same pattern, we should get the same regular expression matcher every time. However, proving that to the compiler is beyond the Haskell type system, so we&amp;#39;re forced to assert that this code is pure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is what the AST transformer I wrote looks like:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;pygments&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Block&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Block&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;pygments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CodeBlock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namevals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromMaybe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;lang&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namevals&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromMaybe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namevals&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;colored&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;code-container&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;preEscapedToHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pygmentize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figcaption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toHtml&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
                &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;composed&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;preEscapedToHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colored&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RawBlock&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;html&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;composed&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;pygments&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h3 id=&quot;table-of-contents&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#table-of-contents&quot; class=&quot;header-link&quot;&gt;Table of Contents&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;The more sophisticated and complex of the AST transformers I wrote for Pandoc is table of contents generation. This is something that kramdown had out of the box, though not as fancy. Paired with automatic id generation for headers, this meant that simply placing &lt;code&gt;{:toc}&lt;/code&gt; in my page would replace that with automatically generated table of contents based on the headers used in the page.&lt;/p&gt;
&lt;h4 id=&quot;alternatives&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#alternatives&quot; class=&quot;header-link&quot;&gt;Alternatives&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Pandoc actually does have support for table of contents generation using the &lt;code&gt;--toc&lt;/code&gt; flag. In fact, &lt;a href=&quot;http://julien.jhome.fr/posts/2013-05-14-adding-toc-to-posts.html&quot;&gt;Julien Tanguy&lt;/a&gt; recently devised a way to generate a separate version of every post which only included the table of contents, then re-introduced the table of contents as a &lt;code&gt;Context&lt;/code&gt; field &lt;code&gt;$toc$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I actually tried this approach, along with a metadata field that decided if the table of contents should be included in a given post or page. However, I ended up deciding against using it. One advantage would be that it took less code on my end, and possibly I would avoid re-inventing the wheel. One reason I didn&amp;#39;t keep it was because there was a tiny increase in compilation time which I fear might accumulate in the future as the number of posts grow. The reason for this is that the table of contents is generated for every post/page, instead of only the ones that should display it.&lt;/p&gt;

&lt;p&gt;Another reason was that it would require me to implement the fancy section numbering in JavaScript, which I don&amp;#39;t think would be too difficult since in this case the table of contents already exists and I simply need to insert my numbering. The main reason I decided against it, along with the previous two reasons, is that there would be a noticeable delay between the time when the table of contents are shown plainly and when they are transformed into my custom table of contents.&lt;/p&gt;
&lt;h4 id=&quot;implementation&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#implementation&quot; class=&quot;header-link&quot;&gt;Implementation&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Implementing this involved many steps. In general terms, I had to make a pass through the document to collect all of the headers, then I had to make another pass to find a special sentinel marker I would manually place in the document to replace it with the generated table of contents. This effectively makes table of contents generation a two-pass transformer.&lt;/p&gt;

&lt;p&gt;Gathering all of the headers and their accompanying information, i.e. HTML &lt;code&gt;id&lt;/code&gt;, text, level, proved to be a pretty straight-forward task using &lt;a href=&quot;http://hackage.haskell.org/packages/archive/pandoc-types/latest/doc/html/Text-Pandoc-Generic.html#v:queryWith&quot;&gt;&lt;code&gt;queryWith&lt;/code&gt;&lt;/a&gt; from the &lt;a href=&quot;http://hackage.haskell.org/package/pandoc-types&quot;&gt;pandoc-types&lt;/a&gt; package:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;queryWith&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Runs a query on matching a elements in a c.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- The results of the queries are combined using mappend.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Once I collect all of the &lt;code&gt;Header&lt;/code&gt; items&amp;#39; information, I normalize them by finding the smallest header &lt;em&gt;level&lt;/em&gt; (i.e. big header) and normalizing all headers based on that level. That is, if smallest header level is 3 (i.e. &lt;code&gt;h3&lt;/code&gt;), every header gets its level subtracted by 2 so that all headers are level 1 and above. Note that I&amp;#39;m not actually modifying the headers in the document, just the information about them that I&amp;#39;ve collected.&lt;/p&gt;

&lt;p&gt;Next, a &lt;a href=&quot;http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Tree.html&quot;&gt;&lt;code&gt;Data.Tree&lt;/code&gt;&lt;/a&gt; is constructed out of the headers which automatically encodes the nesting of the headers. This is done by exploiting &lt;a href=&quot;http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-List.html#v:groupBy&quot;&gt;&lt;code&gt;groupBy&lt;/code&gt;&lt;/a&gt; by passing it &lt;code&gt;&amp;lt;&lt;/code&gt; as an equivalence predicate:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;tocTree&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TocItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Forest&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TocItem&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tocTree&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tocTree&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groupBy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TocItem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TocItem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;This &lt;code&gt;Tree&lt;/code&gt; is finally passed to a recursive function that folds every level of the &lt;code&gt;Tree&lt;/code&gt;---known as a &lt;code&gt;Forest&lt;/code&gt;---into a numbered, unordered list. While that may sound like an oxymoron, the point is that I wanted to have nested numbering in my table of contents. For this reason, I create an unordered list with a &lt;code&gt;span&lt;/code&gt; containing the section number concatenated to the parent&amp;#39;s section number. This function generates the HTML.&lt;/p&gt;

&lt;p&gt;The final problem was finding a way to insert the table of contents on-demand, in a location of my choosing. In kramdown, this is achieved by writing &lt;code&gt;{:toc}&lt;/code&gt;, which gets substituted with the table of contents. Pandoc has no such thing, however. For this reason, I chose a list with a single item, &amp;quot;toc,&amp;quot; as the place holder for the table of contents. This means that I write the following wherever I want the table of contents to show up:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;* toc
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;You can take a look at the beginning of this post to see what the generated table of contents looks like, especially the nested numbering I was referring to.&lt;/p&gt;
&lt;h2 id=&quot;deploying&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#deploying&quot; class=&quot;header-link&quot;&gt;Deploying&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I host my site using GitHub Pages. Such sites are deployed by pushing the site to the master branch of the repository. I wrote a quick shell script that accomplishes this in a pretty straightforward manner. It creates a git ignored directory, &lt;span class=&quot;path&quot;&gt;deploy/&lt;/span&gt;, which itself is under git control, associated with the same repository, but its master branch instead.&lt;/p&gt;

&lt;p&gt;When I deploy the site with &lt;code&gt;./site deploy&lt;/code&gt;, the contents of &lt;span class=&quot;path&quot;&gt;deploy/&lt;/span&gt; are removed---except for the &lt;span class=&quot;path&quot;&gt;.git/&lt;/span&gt; directory---and then all of the new generated files are copied into it. A commit is then generated for the deployment, tagged with the SHA identifier of the commit from which the site was generated, to make it easy for me to track things down sometimes. An eight character, truncated SHA is used as follows:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;COMMIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git log -1 HEAD --pretty&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;format:%H&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SHA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;COMMIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;generated from &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SHA&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; -q
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Finally, the commit is force pushed to the repository, replacing everything already there, effectively deploying the site.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#conclusion&quot; class=&quot;header-link&quot;&gt;Conclusion&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Preliminary migration to Hakyll was pretty quick. This included porting all of my posts, pages, and other assets to the Hakyll and Pandoc Markdown formats. The rest of the week was spent implementing the various features, some outlined above, and refining the code base.&lt;/p&gt;

&lt;p&gt;At first I was a little rusty with my Haskell and found myself at odds with the seemingly capricious compiler, trying to find one way or another to appease it. I quickly remembered that patience prevailed when concerning Haskell, and eventually came to really enjoy reasoning out the problems and solving them with Haskell.&lt;/p&gt;

&lt;p&gt;The site binary which is in charge of generation, previewing, etc. is compiled. Once you have configured Hakyll to your liking, you have a very fast binary, especially compared to other site generators which are known not to scale well with the amount of posts. The &lt;code&gt;Compiler&lt;/code&gt; Monad in Hakyll takes care of dependency tracking, allowing re-generation of only those items which are affected by those which were changed, instead of the whole site.&lt;/p&gt;

&lt;p&gt;But perhaps my favorite aspect of Hakyll is that it&amp;#39;s more like a library for static site generation which you use as you see fit, and as a result, your site is entirely customizable.&lt;/p&gt;
</description><pubDate>2013-05-14</pubDate></item><item><title>xmonad Ignores Bindings</title><link>http://www.blaenkdenum.com/posts/xmonad-ignores-bindings</link><description>&lt;p&gt;In my &lt;a href=&quot;/posts/terminal-customization/&quot;&gt;previous post&lt;/a&gt; I talked about how I spent a while configuring my system, specifically urxvt and zsh, in preparation for setting up &lt;a href=&quot;http://xmonad.org&quot;&gt;xmonad&lt;/a&gt;. I&amp;#39;ve finally gotten around to setting up xmonad. One problem in particular stopped me from continuing with the rest of the configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Shortly after posting in the &lt;a href=&quot;https://code.google.com/p/xmonad/issues/detail?id=273&quot;&gt;issue tracker entry&lt;/a&gt; for this issue relating my experience and affirming that the proposed patch fixed the problem, the gracious developers merged the patch into the main tree. This problem should no longer affect anyone!&lt;/p&gt;
&lt;h2 id=&quot;media-keys&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#media-keys&quot; class=&quot;header-link&quot;&gt;Media Keys&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I have a regular keyboard layout, &lt;a href=&quot;http://www.daskeyboard.com/model-s-ultimate/&quot;&gt;Das Keyboard Model S Ultimate&lt;/a&gt;, which lacks media keys (i.e. volume up, down, etc). This wasn&amp;#39;t too much of a problem when I used headsets because most of them have dedicated volume controls. However, I got tired of headsets being rendered useless when any little thing messed up (e.g. microphone, a speaker, etc).&lt;/p&gt;

&lt;p&gt;As a result I ended up buying a &lt;a href=&quot;http://amzn.com/B00029MTMQ&quot;&gt;cheap standalone mic&lt;/a&gt; and now use my iPhone&amp;#39;s &lt;a href=&quot;http://amzn.com/B004PNZFZ8&quot;&gt;Shure SE215-K&lt;/a&gt; earbuds for sound on my computer. This is very easy to do given my computer case&amp;#39; front panel audio connector. Of course, the problem now is that there aren&amp;#39;t any dedicated media keys and having to use a GUI to change the volume is cumbersome.&lt;/p&gt;

&lt;p&gt;My solution to this problem in Windows and Mac is to bind the bottom right keys to media keys as follows:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;Key&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Right Control&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Volume Up&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Menu&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Volume Down&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Right Windows&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Volume Mute&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;binding&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#binding&quot; class=&quot;header-link&quot;&gt;Binding&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Creating these binds is possible on Windows via a registry hack, facilitated using a program such as &lt;a href=&quot;http://www.randyrants.com/sharpkeys/&quot;&gt;SharpKeys&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On Linux I initially did this using &lt;code&gt;xmodmap&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;remove Control = Control_R
keycode 105 = XF86AudioRaiseVolume
add Control = Control_R

keycode 135 = XF86AudioLowerVolume

remove mod4 = Super_R
keycode 134 = XF86AudioMute
add mod4 = Super_R
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Binding to these &lt;code&gt;XF86Audio*&lt;/code&gt; keys automatically adds support for these keys in different applications like &lt;a href=&quot;http://www.mplayer2.org/&quot;&gt;mplayer2&lt;/a&gt;, but I wanted system-wide volume support. This is typically accomplished by wiring them up in your given Desktop Environment or Window Manager. So I went ahead and did so in &lt;code&gt;xmonad.hs&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xF86XK_AudioMute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;amixer -q set Master,0 toggle&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xF86XK_AudioLowerVolume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;amixer -q set Master,0 5%- unmute&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xF86XK_AudioRaiseVolume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;amixer -q set Master,0 5%+ unmute&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h2 id=&quot;the-problem&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#the-problem&quot; class=&quot;header-link&quot;&gt;The Problem&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The problem was that xmonad would only react to the Right Control key (Volume Up). However, &lt;code&gt;xev&lt;/code&gt; correctly interpreted the keys as having been bound to the &lt;code&gt;XF86Audio*&lt;/code&gt; keys. I was really confused as to why the binds apparently did work at the system level but only one of them worked at the window manager level.&lt;/p&gt;

&lt;p&gt;To rule out that it wasn&amp;#39;t something with the system-level (xmodmap) binds, I decided to check if it worked in &lt;a href=&quot;http://awesome.naquadah.org/&quot;&gt;Awesome&lt;/a&gt;:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;awful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;XF86AudioLowerVolume&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;amixer -q set Master,0 5%- unmute&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;awful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;XF86AudioRaiseVolume&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;amixer -q set Master,0 5%+ unmute&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;awful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;XF86AudioMute&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;amixer set Master,0 toggle&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Indeed it worked perfectly. So now I had narrowed down the problem to xmonad.&lt;/p&gt;
&lt;h2 id=&quot;bug-hunting&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#bug-hunting&quot; class=&quot;header-link&quot;&gt;Bug Hunting&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Eventually I decided to stop by &lt;code&gt;#xmonad&lt;/code&gt; on freenode. There I found Paul Fertser who spent the next ~6 hours helping me track down what he figured to be a bug in xmonad. I told him that the system-level binds did work, but not in xmonad. I showed him my binds using &lt;code&gt;xmodmap -pke&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;He noticed that the &lt;code&gt;XF86Audio*&lt;/code&gt; keys were bound twice: once by default by XKB (&lt;code&gt;xmodmap&lt;/code&gt;&amp;#39;s more modern replacement) bound to the keycodes I would have if my keyboard had media keys, and bound again to the keys I chose (the bottom right keys). He then hypothesized that xmonad wasn&amp;#39;t grabbing the keys at all due to Xlib limitations. Specifically, the &lt;code&gt;XKeysymToKeycode&lt;/code&gt; function only returns one keycode per key, biased towards lower keycodes, presumably due to an increasing iterative search of the keycodes for a match.&lt;/p&gt;

&lt;p&gt;This theory accounted for why the Right Control (Volume Up) bind did work and not the others. What happened was that Right Control&amp;#39;s keycode was lower than the duplicate bind&amp;#39;s keycode. As a result, when xmonad used &lt;code&gt;XKeysymToKeycode&lt;/code&gt; it retrieved the correct keycode. The other two binds, however, have higher keycodes than the default-bound ones, and so &lt;code&gt;XKeysymToKeycode&lt;/code&gt; returned the first (lower) keycode it found and as a result xmonad never even knew of the other binds&amp;#39; existence.&lt;/p&gt;

&lt;p&gt;To test this theory, Paul had me run &lt;a href=&quot;http://en.wikipedia.org/wiki/Ltrace&quot;&gt;&lt;code&gt;ltrace&lt;/code&gt;&lt;/a&gt; on xmonad to see which keys xmonad grabbed. The output of this clearly showed that xmonad only grabbed the keys with the lower keycodes.&lt;/p&gt;
&lt;h2 id=&quot;workaround&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#workaround&quot; class=&quot;header-link&quot;&gt;Workaround&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Now that we were pretty sure of the cause of this, the workaround was to remove the other keycodes (for keys I didn&amp;#39;t even have on my keyboard). At this time I decided I might as well switch over to XKB. The first order of business was to &lt;a href=&quot;http://unix.stackexchange.com/a/65600/10163&quot;&gt;dump my XKB map&lt;/a&gt;:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;setxkbmap -print &amp;gt; ~/.xkb/keymap/mymap
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Then I created a &lt;code&gt;~/.xkb/symbols/volume_keys&lt;/code&gt; file to store my media key binds. It took me a long while to figure out how to remove/unbind the default-bound keys. One problem was that XKB sets different aliases for keys. For example, &lt;code&gt;&amp;lt;I0D&amp;gt;&lt;/code&gt; (I guess that&amp;#39;s a media key) was aliased to &lt;code&gt;&amp;lt;MUTE&amp;gt;&lt;/code&gt;. I looked around in &lt;code&gt;/usr/share/X11/xkb/rules/evdev&lt;/code&gt; to see what was aliased and made sure to unbind those too. As for unbinding, at first Paul suggested to bind the keys to &lt;code&gt;NoSymbol&lt;/code&gt; but that apparently had no effect. Eventually I found out it was possible with &lt;a href=&quot;http://madduck.net/docs/extending-xkb/#attaching_symbols_to_keys&quot;&gt;&lt;code&gt;VoidSymbol&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;partial modifier_keys
xkb_symbols &quot;volume_keys&quot; {
  // mute
  replace key &lt;MUTE&gt; { [ VoidSymbol ] };
  replace key &lt;I0D&gt; { [ VoidSymbol ] };

  // lower volume
  replace key &lt;VOL-&gt; { [ VoidSymbol ] };
  replace key &lt;I0E&gt; { [ VoidSymbol ] };

  // raise volume
  replace key &lt;VOL+&gt; { [ VoidSymbol ] };
  replace key &lt;I0F&gt; { [ VoidSymbol ] };

  replace key &lt;RCTL&gt; { [ XF86AudioRaiseVolume ] };
  replace key &lt;MENU&gt; { [ XF86AudioLowerVolume ] };
  replace key &lt;RWIN&gt; { [ XF86AudioMute ] };
  replace key &lt;RALT&gt; { [ Multi_key ] };
};
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Now I loaded my XKB map in &lt;code&gt;~/.xinitrc&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xkbcomp -I&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.xkb ~/.xkb/keymap/mymap &lt;span class=&quot;nv&quot;&gt;$DISPLAY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;I restarted xmonad with &lt;code&gt;Mod-Shift-Q&lt;/code&gt; (so that &lt;code&gt;~/.xinitrc&lt;/code&gt; is rerun) and everything now worked perfectly.&lt;/p&gt;
&lt;h2 id=&quot;bug-report&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#bug-report&quot; class=&quot;header-link&quot;&gt;Bug Report&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Over the course of my transition to XKB, Paul found that there was already &lt;a href=&quot;https://code.google.com/p/xmonad/issues/detail?id=273&quot;&gt;an issue&lt;/a&gt; opened back in 2009 concerning this. The issue report has a patch attached that fixes this, but the patch has yet to be applied to xmonad. Paul suggested I try the patch myself and communicate my results back to the issue report. So I went ahead and got xmonad and xmonadContrib from the darcs repository, ran a simple &lt;code&gt;darcs apply keycode.dpatch&lt;/code&gt;, and installed each with a &lt;code&gt;--prefix&lt;/code&gt; to prevent clashing with the ones already installed with pacman. Indeed, the patch worked perfectly.&lt;/p&gt;
</description><pubDate>2013-02-24</pubDate></item><item><title>Terminal Customization</title><link>http://www.blaenkdenum.com/posts/terminal-customization</link><description>&lt;nav id=&quot;toc&quot;class=&quot;right-toc&quot;&gt;
&lt;h3&gt;Contents&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;#dotfiles&quot;&gt;dotfiles&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#urxvt&quot;&gt;urxvt&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;#colors&quot;&gt;Colors&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#clipboard&quot;&gt;Clipboard&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#zsh&quot;&gt;zsh&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;#prompt&quot;&gt;Prompt&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;#basic&quot;&gt;Basic&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#git&quot;&gt;git&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#ssh&quot;&gt;SSH&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#vi-binds&quot;&gt;vi-Binds&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#highlighting&quot;&gt;Highlighting&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/nav&gt;

&lt;p&gt;A while back I switched over to &lt;a href=&quot;http://en.wikipedia.org/wiki/Z_shell&quot;&gt;zsh&lt;/a&gt; as my shell and used &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;oh-my-zsh&lt;/a&gt; to get up and running quickly. I barely used any of the features it provided, so I recently decided to do away with it and get zsh setup from scratch. At the same time I decided it&amp;#39;d be a good idea to do the same for &lt;a href=&quot;http://en.wikipedia.org/wiki/Rxvt-unicode&quot;&gt;urxvt&lt;/a&gt;. These initiatives had the consequence that I ended up completely redoing the way I maintained my dotfiles which had the effect of greatly improving my overall setup.&lt;/p&gt;

&lt;p&gt;Before I go any further I&amp;#39;d like to point out that all of the things that I&amp;#39;ll talk about in this post are available in my &lt;a href=&quot;https://github.com/blaenk/dots&quot;&gt;dotfiles&lt;/a&gt; repository. I&amp;#39;ll make an effort to link to the relevant individual files from the repository for each topic I cover.&lt;/p&gt;

&lt;p&gt;Here is the end result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/terminal-customization/urxvt.png&quot; class=&quot;center&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;dotfiles&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#dotfiles&quot; class=&quot;header-link&quot;&gt;dotfiles&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I previously had a simple Rakefile that symlinked all of the files in the dotfiles directory into my home directory, except for some in an exception list. However, this had the consequence that I had to have ruby installed beforehand, and I didn&amp;#39;t like to install ruby through means other than something like &lt;a href=&quot;https://github.com/sstephenson/rbenv/&quot;&gt;rbenv&lt;/a&gt;. I preferred instead to be able to get my dotfiles up and running as soon as possible on a new system. As a result I opted to use a shell script to deploy my dotfiles.&lt;/p&gt;

&lt;p&gt;After looking around in dotfile repositories I found &lt;a href=&quot;https://github.com/holman/dotfiles/blob/master/script/bootstrap&quot;&gt;hoffman&amp;#39;s bootstrap script&lt;/a&gt;. The simple script uses &lt;code&gt;find&lt;/code&gt; to find files and directories whose names end in &amp;quot;.ln&amp;quot; and symlinks them into the home directory. I modified it a bit to use the &amp;quot;.ln&amp;quot; suffix instead of &amp;quot;.symlink&amp;quot;---purely cosmetic of course---as well as some other slight changes. I think I&amp;#39;ll change it later so that it can gracefully handle operating system-dependent dotfiles.&lt;/p&gt;
&lt;h2 id=&quot;urxvt&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#urxvt&quot; class=&quot;header-link&quot;&gt;urxvt&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;My first goal was to get urxvt configured properly. I really didn&amp;#39;t like the way stock urxvt looked and operated (e.g. clipboard use), so I set out to learn its configuration format. I ended up defining my own color scheme as well as improving its clipboard support.&lt;/p&gt;
&lt;h3 id=&quot;colors&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#colors&quot; class=&quot;header-link&quot;&gt;Colors&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;I initially attempted to replicate the color scheme I used in the OS X terminal, however I found that the very same colors didn&amp;#39;t look quite the same in the terminals I tried on Linux (GNOME&amp;#39;s or urxvt). I have an IPS monitor which I think has made me pretty sensitive to color. As a result I decided to tweak it a little, and I feel that I&amp;#39;ve come up with an even better color scheme than before by taking some of the colors from my &lt;a href=&quot;https://github.com/blaenk/dots/blob/master/vim/vim.ln/colors/blaenk.vim&quot;&gt;vim theme&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve come to recognize recently that it&amp;#39;s pretty easy to go overboard with the amount of colors used in anything, and that oftentimes things tend to look better with a more restricted color palette. My terminal uses more color than your common terminal or prompt, but I think it&amp;#39;s all in good taste and for semantic purposes. In fact, I&amp;#39;ve come to really like the &lt;a href=&quot;https://github.com/blaenk/dots/blob/master/X11/Xresources.ln#L40&quot;&gt;color scheme I chose&lt;/a&gt;, it somehow reminds me of SNES game color palettes.&lt;/p&gt;
&lt;h3 id=&quot;clipboard&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#clipboard&quot; class=&quot;header-link&quot;&gt;Clipboard&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Stock urxvt uses the &lt;a href=&quot;http://en.wikipedia.org/wiki/X_Window_selection&quot;&gt;X Window Selection&lt;/a&gt; copy and paste mechanism. Paste can be done by middle clicking, and copying is on-select. I found a &lt;a href=&quot;https://github.com/muennich/urxvt-perls&quot;&gt;set of scripts&lt;/a&gt; that take the copy and paste system from barebones to awesome.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;clipboard&lt;/code&gt; script allows me to copy and paste using the Alt-keys, as in OS X where one can use the Cmd-keys to copy and paste. These are some nice binds to use without interfering with the terminal by sending signals to the current program.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;keyboard-select&lt;/code&gt; script allows me to go into &amp;quot;visual mode&amp;quot; on the terminal and use vi-bindings to do my copying. This lets me copy text from the terminal without having to leave the keyboard. This paired with my zsh vi-bindings means I never have to leave the home row.&lt;/p&gt;
&lt;h2 id=&quot;zsh&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#zsh&quot; class=&quot;header-link&quot;&gt;zsh&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;This was the bulk of the work, but I quickly realized that it wasn&amp;#39;t all that difficult. I didn&amp;#39;t want to have one huge zshrc file. Instead I wanted to have specific files for different parts of the configuration, for example &lt;code&gt;prompt.zsh&lt;/code&gt; would contain configuration for the prompt. I had seen such systems in oh-my-zsh as well as certain peoples&amp;#39; dotfile repositories. I took inspiration from &lt;a href=&quot;https://github.com/sunaku/home&quot;&gt;sunaku&amp;#39;s dotfiles&lt;/a&gt; in which he has a zsh file that sources all of the zsh files in a directory.&lt;/p&gt;
&lt;h3 id=&quot;prompt&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#prompt&quot; class=&quot;header-link&quot;&gt;Prompt&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;My zsh prompt is actually pretty simple. I played around with multiline prompts but I really disliked the feel of them. The zsh file dedicated to &lt;a href=&quot;https://github.com/blaenk/dots/blob/master/zsh/zsh/prompt.zsh&quot;&gt;defining the prompt&lt;/a&gt; is very clean in my opinion, which is something I strived for throughout its development.&lt;/p&gt;
&lt;h4 id=&quot;basic&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#basic&quot; class=&quot;header-link&quot;&gt;Basic&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The basic prompt consists of a lambda followed by the path---which &lt;a href=&quot;http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/#current-directory&quot;&gt;auto-collapses&lt;/a&gt; &lt;code&gt;$HOME&lt;/code&gt; to &lt;code&gt;~&lt;/code&gt;---with &lt;a href=&quot;http://superuser.com/questions/49092/how-to-format-the-path-in-a-zsh-prompt&quot;&gt;highlighted path separators&lt;/a&gt; followed by a right arrow. Pretty simple and easy on the colors in my opinion, aside from the unconventional highlighting of the path separators, which was something I had long wanted and took me a while to get right.&lt;/p&gt;

&lt;p&gt;My prompt is inspired by the Haskell &lt;a href=&quot;http://www.haskell.org/haskellwiki/Lambda_abstraction&quot;&gt;lambda syntax&lt;/a&gt; so that it looks like every line is a lambda operating on the current directory whose code is the command you type:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;Here&amp;#39;s what the actual prompt looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/terminal-customization/basic-prompt.png&quot; class=&quot;center&quot;&gt;&lt;/p&gt;

&lt;p&gt;Here it is in text:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;λ ~/code/haskell ➜
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I have changed my prompt to be multiline. All that has changed is that the ➜ is on its own line.&lt;/p&gt;
&lt;h4 id=&quot;git&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#git&quot; class=&quot;header-link&quot;&gt;git&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Like any self-respecting modern prompt, mine &lt;a href=&quot;https://github.com/blaenk/dots/blob/master/zsh/zsh/vcsinfo.zsh&quot;&gt;incorporates git information&lt;/a&gt; when within a git repository. It shows the current branch, whether there are any untracked files (denoted by &lt;code&gt;.&lt;/code&gt;), modified files (denoted by &lt;code&gt;#&lt;/code&gt;), or staged files (denoted by &lt;code&gt;+&lt;/code&gt;). Another nice little thing I added was a marker for how far ahead and/or behind we are from the remote branch. This is appended to the aforementioned information and only shows up when we &lt;em&gt;are&lt;/em&gt; ahead or behind.&lt;/p&gt;

&lt;p&gt;All of these features were done using zsh&amp;#39;s &lt;a href=&quot;http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information&quot;&gt;vcsinfo&lt;/a&gt; with the help of &lt;a href=&quot;http://arjanvandergaag.nl/blog/customize-zsh-prompt-with-vcs-info.html&quot;&gt;Arjan van der Gaag&lt;/a&gt; and, once again, &lt;a href=&quot;https://github.com/sunaku/home/blob/master/.zsh/config/prompt.zsh&quot;&gt;sunaku&lt;/a&gt;. Here&amp;#39;s what it looks like &lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/terminal-customization/git-prompt.png&quot; class=&quot;center&quot;&gt;&lt;/p&gt;

&lt;p&gt;Again in text:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;λ ~/.dots (master . # +){+1} ➜ 
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;The branch is &lt;code&gt;master&lt;/code&gt; and apparently there&amp;#39;s unstaged files, modifed files, and staged files. Furthermore, the &lt;code&gt;{+1}&lt;/code&gt; shows that my branch is one commit ahead of the remote branch. It would also show the number of commits we are behind, in red, if that were the case---which in my opinion can be very handy so that you can avoid conflicts by rebasing or merging before you push. This segment only shows up if either of those conditions is met.&lt;/p&gt;
&lt;h4 id=&quot;ssh&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#ssh&quot; class=&quot;header-link&quot;&gt;SSH&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The prompt also detects if it&amp;#39;s being viewed through SSH. I don&amp;#39;t like viewing hostname in my prompt on machines I&amp;#39;m on locally as I feel it&amp;#39;s pointless. However, when I&amp;#39;m connected to a remote server via SSH, it&amp;#39;s often handy to have the hostname around to differentiate between your computer and the remote host. For this reason my prompt only shows the hostname when it detects that it&amp;#39;s being viewed through an SSH connection. Here&amp;#39;s what it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/terminal-customization/ssh-prompt.png&quot; class=&quot;center&quot;&gt;&lt;/p&gt;

&lt;p&gt;Once again in text:&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;[someserver] λ ~/.dots (master) ➜ 
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Update: October 28, 2013&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve actually done away with this component of the prompt. I didn&amp;#39;t like how the lambda no longer aligned with the arrow symbol. I&amp;#39;ve instead decided to add a pretty simple green &lt;code&gt;R&lt;/code&gt; at the end of the current working path, to signify that I am on a &amp;quot;remote&amp;quot; machine, so it reads something like &amp;quot;currently on x path remotely.&amp;quot;&lt;/p&gt;
&lt;figure class=&quot;codeblock&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;highlight language-text&quot;&gt;λ ~/.dots R (master)
➜
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;h3 id=&quot;vi-binds&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#vi-binds&quot; class=&quot;header-link&quot;&gt;vi-Binds&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;One thing that I can&amp;#39;t live without now when using vi-bindings is binding &lt;code&gt;jj&lt;/code&gt; to vi-mode. The default key for this is Escape, but Escape is &lt;a href=&quot;http://unix.stackexchange.com/questions/23138/esc-key-causes-a-small-delay-in-terminal-due-to-its-alt-behavior&quot;&gt;used for other hotkeys&lt;/a&gt; that the terminal (or shell?) intercepts. For this reason, a single keypress of Escape introduces a bit of lag, which I imagine is required to differentiate a hotkey (i.e. &lt;code&gt;Esc-C&lt;/code&gt;) from a simple Escape keypress.&lt;/p&gt;

&lt;p&gt;Binding to &lt;code&gt;jj&lt;/code&gt; has the consequence of being more accessible. In fact, this is a common bind that people tend to use in vim for this very reason. Before coming to this realization I mainly used Emacs-binds because they didn&amp;#39;t introduce lag. However, with this new bind I&amp;#39;m able to jump into vi-mode and edit commands very quickly and more intuitively (for a vim user like myself).&lt;/p&gt;
&lt;h3 id=&quot;highlighting&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#highlighting&quot; class=&quot;header-link&quot;&gt;Highlighting&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;If you&amp;#39;ve been wondering how it is that my commands are highlighted, it&amp;#39;s made possible by &lt;a href=&quot;https://github.com/zsh-users/zsh-syntax-highlighting&quot;&gt;this highlighting script&lt;/a&gt;. Simply sourcing that script into your zsh environment suddenly colors your commands. In my opinion it makes the terminal look much better without going overboard with the colors. I did have to &lt;a href=&quot;https://github.com/blaenk/dots/blob/master/zsh/zsh/highlight.zsh&quot;&gt;tweak some settings&lt;/a&gt; though because I felt that the default configuration did go a bit overboard on the styling, such as underlining program names.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;
&lt;span class=&quot;hash&quot;&gt;#&lt;/span&gt;
&lt;a href=&quot;#conclusion&quot; class=&quot;header-link&quot;&gt;Conclusion&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I have to say that I love the way my terminal looks and operates now. This has all been in preparation for setting up &lt;a href=&quot;http://en.wikipedia.org/wiki/xmonad&quot;&gt;xmonad&lt;/a&gt;, which I intend to take a shot at soon. For the curious, I&amp;#39;m doing all of this on &lt;a href=&quot;http://www.archlinux.org/&quot;&gt;arch linux&lt;/a&gt;, but I didn&amp;#39;t say it earlier because nothing in this post depends on this. In fact, none of the content in this post is all that specific to Linux itself even. I&amp;#39;ll try to update this post whenever my setup changes, but I think I&amp;#39;m quite comfortable with the way it is, and will be for the foreseeable future.&lt;/p&gt;

&lt;p&gt;In my opinion, the benefit of using such tried and proven, mature tools is that once you take the time to configure them to your liking you can use them without modification for a long time. Barring some imminent, majorly disruptive paradigm shift in software development, I can see myself using many of these tools throughout my career as a software developer.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;Ignore the &lt;code&gt;echo&lt;/code&gt; command. I used it to give the current line some padding to make taking a screenshot a little bit easier.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description><pubDate>2013-02-12</pubDate></item></channel></rss>